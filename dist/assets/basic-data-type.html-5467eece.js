import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,d as a,b as e,e as t}from"./app-1c5b5ce3.js";const i={},r=t('<h1 id="_3-3-java-数据类型" tabindex="-1"><a class="header-anchor" href="#_3-3-java-数据类型" aria-hidden="true">#</a> 3.3 Java 数据类型</h1><p>“Java 是一种静态类型的编程语言，这意味着所有变量必须在使用之前声明好，也就是必须得先指定变量的类型和名称。”我吸了一口麦香可可奶茶后对三妹说。</p><p>Java 中的数据类型可分为 2 种：</p><p>1）<strong>基本数据类型</strong>。</p><p>基本数据类型是 Java 语言操作数据的基础，包括 boolean、char、byte、short、int、long、float 和 double，共 8 种。</p><p>2）<strong>引用数据类型</strong>。</p>',6),u={href:"https://javabetter.cn/array/array.html",target:"_blank",rel:"noopener noreferrer"},d={href:"https://javabetter.cn/oo/object-class.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://javabetter.cn/oo/interface.html",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,"来个思维导图，感受下。",-1),m=n("figure",null,[n("img",{src:"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/core-grammar/nine-01.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),b={href:"https://javabetter.cn/oo/var.html",target:"_blank",rel:"noopener noreferrer"},h=t(`<p>当变量是局部变量的时候，必须得先初始化，否则编译器不允许你使用它。拿 int 来举例吧，看下图。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/core-grammar/nine-02.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当变量是成员变量或者静态变量时，可以不进行初始化，它们会有一个默认值，仍然以 int 为例，来看代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 微信搜「沉默王二」，回复关键字 PDF
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalVar</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">LocalVar</span> lv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lv<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>来看输出结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0
0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>瞧见没，int 作为成员变量时或者静态变量时的默认值是 0。那不同的基本数据类型，是有不同的默认值和大小的，来个表格感受下。</p><table><thead><tr><th>数据类型</th><th>默认值</th><th>大小</th></tr></thead><tbody><tr><td>boolean</td><td>false</td><td>1 比特</td></tr><tr><td>char</td><td>&#39;\\u0000&#39;</td><td>2 字节</td></tr><tr><td>byte</td><td>0</td><td>1 字节</td></tr><tr><td>short</td><td>0</td><td>2 字节</td></tr><tr><td>int</td><td>0</td><td>4 字节</td></tr><tr><td>long</td><td>0L</td><td>8 字节</td></tr><tr><td>float</td><td>0.0f</td><td>4 字节</td></tr><tr><td>double</td><td>0.0</td><td>8 字节</td></tr></tbody></table><h3 id="_01、比特和字节" tabindex="-1"><a class="header-anchor" href="#_01、比特和字节" aria-hidden="true">#</a> 01、比特和字节</h3><p>那三妹可能要问，“比特和字节是什么鬼？”</p><p>比特币（Bitcoin）听说过吧？字节跳动（Byte Dance）听说过吧？这些名字当然不是乱起的，确实和比特、字节有关系。</p><h4 id="_1-bit-比特" tabindex="-1"><a class="header-anchor" href="#_1-bit-比特" aria-hidden="true">#</a> <strong>1）bit（比特）</strong></h4><p>比特作为信息技术的最基本存储单位，非常小，但大名鼎鼎的比特币就是以此命名的，它的简写为小写字母“b”。</p><p>大家都知道，计算机是以二进制存储数据的，二进制的一位，就是 1 比特，也就是说，比特要么为 0 要么为 1。</p><h4 id="_2-byte-字节" tabindex="-1"><a class="header-anchor" href="#_2-byte-字节" aria-hidden="true">#</a> <strong>2）Byte（字节）</strong></h4><p>通常来说，一个英文字符是一个字节，一个中文字符是两个字节。字节与比特的换算关系是：1 字节 = 8 比特。</p><p>在往上的单位就是 KB，并不是 1000 字节，因为计算机只认识二进制，因此是 2 的 10 次方，也就是 1024 个字节。</p><p>（终于知道 1024 和程序员的关系了吧？狗头保命）</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/core-grammar/nine-03.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_02、基本数据类型" tabindex="-1"><a class="header-anchor" href="#_02、基本数据类型" aria-hidden="true">#</a> 02、基本数据类型</h3><p>接下来，我们再来详细地了解一下 8 种基本数据类型。</p><h4 id="_1-布尔" tabindex="-1"><a class="header-anchor" href="#_1-布尔" aria-hidden="true">#</a> 1）布尔</h4><p>布尔（boolean）仅用于存储两个值：true 和 false，也就是真和假，通常用于条件的判断。代码示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> hasMoney <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> hasGirlFriend <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-byte" tabindex="-1"><a class="header-anchor" href="#_2-byte" aria-hidden="true">#</a> 2）byte</h4><p>一个字节可以表示 2^8 = 256 个不同的值。由于 byte 是有符号的，它的值可以是负数或正数，其取值范围是 -128 到 127（包括 -128 和 127）。</p><p>在网络传输、大文件读写时，为了节省空间，常用字节来作为数据的传输方式。代码示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">byte</span> b<span class="token punctuation">;</span> <span class="token comment">// 声明一个 byte 类型变量</span>
b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 将值 10 赋给变量 b</span>
<span class="token keyword">byte</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// 声明并初始化一个 byte 类型变量 c，赋值为 -100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-short" tabindex="-1"><a class="header-anchor" href="#_3-short" aria-hidden="true">#</a> 3）short</h4><p>short 的取值范围在 -32,768 和 32,767 之间，包含 32,767。代码示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">short</span> s<span class="token punctuation">;</span> <span class="token comment">// 声明一个 short 类型变量</span>
s <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token comment">// 将值 1000 赋给变量 s</span>
<span class="token keyword">short</span> t <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2000</span><span class="token punctuation">;</span> <span class="token comment">// 声明并初始化一个 short 类型变量 t，赋值为 -2000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际开发中，short 比较少用，整型用 int 就 OK。</p><h4 id="_3-int" tabindex="-1"><a class="header-anchor" href="#_3-int" aria-hidden="true">#</a> 3）int</h4><p>int 的取值范围在 -2,147,483,648（-2 ^ 31）和 2,147,483,647（2 ^ 31 -1）（含）之间。如果没有特殊需求，整型数据就用 int。代码示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// 声明一个 int 类型变量</span>
i <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">;</span> <span class="token comment">// 将值 1000000 赋给变量 i</span>
<span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2000000</span><span class="token punctuation">;</span> <span class="token comment">// 声明并初始化一个 int 类型变量 j，赋值为 -2000000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-long" tabindex="-1"><a class="header-anchor" href="#_5-long" aria-hidden="true">#</a> 5）long</h4><p>long 的取值范围在 -9,223,372,036,854,775,808(-2^63) 和 9,223,372,036,854,775,807(2^63 -1)（含）之间。如果 int 存储不下，就用 long。代码示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">long</span> l<span class="token punctuation">;</span> <span class="token comment">// 声明一个 long 类型变量</span>
l <span class="token operator">=</span> <span class="token number">100000000000L</span><span class="token punctuation">;</span> <span class="token comment">// 将值 100000000000L 赋给变量 l（注意要加上 L 后缀）</span>
<span class="token keyword">long</span> m <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">20000000000L</span><span class="token punctuation">;</span> <span class="token comment">// 声明并初始化一个 long 类型变量 m，赋值为 -20000000000L</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了和 int 作区分，long 型变量在声明的时候，末尾要带上大写的“L”。不用小写的“l”，是因为小写的“l”容易和数字“1”混淆。</p><h4 id="_6-float" tabindex="-1"><a class="header-anchor" href="#_6-float" aria-hidden="true">#</a> 6）float</h4><p>float 是单精度的浮点数（单精度浮点数的有效数字大约为 6 到 7 位），32 位（4 字节），遵循 IEEE 754（二进制浮点数算术标准），取值范围为 1.4E-45 到 3.4E+38。float 不适合用于精确的数值，比如说金额。代码示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">float</span> f<span class="token punctuation">;</span> <span class="token comment">// 声明一个 float 类型变量</span>
f <span class="token operator">=</span> <span class="token number">3.14159f</span><span class="token punctuation">;</span> <span class="token comment">// 将值 3.14159f 赋给变量 f（注意要加上 f 后缀）</span>
<span class="token keyword">float</span> g <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2.71828f</span><span class="token punctuation">;</span> <span class="token comment">// 声明并初始化一个 float 类型变量 g，赋值为 -2.71828f</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了和 double 作区分，float 型变量在声明的时候，末尾要带上小写的“f”。不需要使用大写的“F”，是因为小写的“f”很容易辨别。</p><h4 id="_7-double" tabindex="-1"><a class="header-anchor" href="#_7-double" aria-hidden="true">#</a> 7）double</h4><p>double 是双精度浮点数（双精度浮点数的有效数字大约为 15 到 17 位），占 64 位（8 字节），也遵循 IEEE 754 标准，取值范围大约 ±4.9E-324 到 ±1.7976931348623157E308。double 同样不适合用于精确的数值，比如说金额。</p><p>代码示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">double</span> myDouble <span class="token operator">=</span> <span class="token number">3.141592653589793</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,47),g={href:"https://javabetter.cn/basic-grammar/bigdecimal-biginteger.html",target:"_blank",rel:"noopener noreferrer"},_=t(`<blockquote><p>在实际开发中，如果不是特别大的金额（精确到 0.01 元，也就是一分钱），一般建议乘以 100 转成整型进行处理。</p></blockquote><h4 id="_8-char" tabindex="-1"><a class="header-anchor" href="#_8-char" aria-hidden="true">#</a> 8）char</h4><p>char 用于表示 Unicode 字符，占 16 位（2 字节）的存储空间，取值范围为 0 到 65,535。</p><p>代码示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">char</span> letterA <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 用英文的单引号包裹住。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5),f={href:"https://javabetter.cn/string/constant-pool.html",target:"_blank",rel:"noopener noreferrer"},y=t('<h3 id="_03、单精度和双精度" tabindex="-1"><a class="header-anchor" href="#_03、单精度和双精度" aria-hidden="true">#</a> 03、单精度和双精度</h3><p>单精度（single-precision）和双精度（double-precision）是指两种不同精度的浮点数表示方法。</p><p>单精度是这样的格式，1 位符号，8 位指数，23 位小数。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/core-grammar/nine-04.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>单精度浮点数通常占用 32 位（4 字节）存储空间。数值范围大约是 ±1.4E-45 到 ±3.4028235E38，精度大约为 6 到 9 位有效数字。</p><p>双精度是这样的格式，1 位符号，11 位指数，52 为小数。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/core-grammar/nine-05.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>双精度浮点数通常占用 64 位（8 字节）存储空间，数值范围大约是 ±4.9E-324 到 ±1.7976931348623157E308，精度大约为 15 到 17 位有效数字。</p><p>计算精度取决于小数位（尾数）。小数位越多，则能表示的数越大，那么计算精度则越高。</p><p>一个数由若干位数字组成，其中影响测量精度的数字称作有效数字，也称有效数位。有效数字指科学计算中用以表示一个浮点数精度的那些数字。一般地，指一个用小数形式表示的浮点数中，从第一个非零的数字算起的所有数字。如 1.24 和 0.00124 的有效数字都有 3 位。</p><p>以下是确定有效数字的一些基本规则：</p><ul><li>非零数字总是有效的。</li><li>位于两个非零数字之间的零是有效的。</li><li>对于小数，从左侧开始的第一个非零数字之前的零是无效的。</li><li>对于整数，从右侧开始的第一个非零数字之后的零是无效的。</li></ul><p>下面是一些示例，说明如何确定有效数字：</p><ul><li>1234：4 个有效数字（所有数字都是非零数字）</li><li>1002：4 个有效数字（零位于两个非零数字之间）</li><li>0.00234：3 个有效数字（从左侧开始的前两个零是无效的）</li><li>1200：2 个有效数字（从右侧开始的两个零是无效的）</li></ul><h3 id="_04、int-和-char-类型互转" tabindex="-1"><a class="header-anchor" href="#_04、int-和-char-类型互转" aria-hidden="true">#</a> 04、int 和 char 类型互转</h3><p>int 和 char 之间比较特殊，可以互转，也会在以后的学习当中经常遇到。</p>',16),j={href:"https://javabetter.cn/basic-grammar/type-cast.html",target:"_blank",rel:"noopener noreferrer"},w=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> value_int <span class="token operator">=</span> <span class="token number">65</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> value_char  <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> value_int<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value_char<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),x=n("code",null,"A",-1),S={href:"https://javabetter.cn/basic-extra-meal/java-unicode.html",target:"_blank",rel:"noopener noreferrer"},I=t(`<p>2）可以使用 <code>Character.forDigit()</code> 方法将整型 int 转换为字符 char，参数 radix 为基数，十进制为 10，十六进制为 16。。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> radix <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> value_int <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> value_char <span class="token operator">=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">forDigit</span><span class="token punctuation">(</span>value_int <span class="token punctuation">,</span> radix<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value_char <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Character 为 char 的包装器类型。我们随后会讲。</p><p>3）可以使用 int 的包装器类型 Integer 的 <code>toString()</code> 方法+String 的 <code>charAt()</code> 方法转成 char。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> value_int <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> value_char <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>value_int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value_char <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4）char 转 int</p><p>当然了，如果只是简单的 char 转 int，直接赋值就可以了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,8),L={href:"https://javabetter.cn/basic-grammar/type-cast.html",target:"_blank",rel:"noopener noreferrer"},C=n("h3",{id:"_05、包装器类型",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_05、包装器类型","aria-hidden":"true"},"#"),a(" 05、包装器类型")],-1),E={href:"https://javabetter.cn/oo/object-class.html",target:"_blank",rel:"noopener noreferrer"},J=t(`<p>Java 提供了以下包装器类型，与基本数据类型一一对应：</p><ul><li>Byte（对应 byte）</li><li>Short（对应 short）</li><li>Integer（对应 int）</li><li>Long（对应 long）</li><li>Float（对应 float）</li><li>Double（对应 double）</li><li>Character（对应 char）</li><li>Boolean（对应 boolean）</li></ul><p>包装器类型允许我们使用基本数据类型提供的各种实用方法，并兼容需要对象类型的场景。例如，我们可以使用 Integer 类的 parseInt 方法将字符串转换为整数，或使用 Character 类的 isDigit 方法检查字符是否为数字，还有前面提到的 <code>Character.forDigit()</code> 方法。</p><p>下面是一个简单的示例，演示了如何使用包装器类型：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 使用 Integer 包装器类型</span>
<span class="token class-name">Integer</span> integerValue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;整数值: &quot;</span> <span class="token operator">+</span> integerValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 将字符串转换为整数</span>
<span class="token class-name">String</span> numberString <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> parsedNumber <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>numberString<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;整数值: &quot;</span> <span class="token operator">+</span> parsedNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用 Character 包装器类型</span>
<span class="token class-name">Character</span> charValue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Character</span><span class="token punctuation">(</span><span class="token char">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;字符: &quot;</span> <span class="token operator">+</span> charValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 检查字符是否为数字</span>
<span class="token keyword">char</span> testChar <span class="token operator">=</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>testChar<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;字符是个数字.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),q={href:"https://javabetter.cn/basic-extra-meal/int-cache.html",target:"_blank",rel:"noopener noreferrer"},V={href:"https://javabetter.cn/string/immutable.html",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"Integer.parseInt()",-1),z=n("p",null,[a("我们有一个字符变量 testChar，并为其赋值字符 '9'。我们使用 "),n("code",null,"Character.isDigit()"),a(" 方法检查 testChar 是否为数字字符。如果是数字字符，我们将输出一条消息到控制台。")],-1),A={href:"https://javabetter.cn/basic-extra-meal/box.html",target:"_blank",rel:"noopener noreferrer"},B=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> integerValue <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span> <span class="token comment">// 自动装箱，等同于 new Integer(42)</span>
<span class="token keyword">int</span> primitiveValue <span class="token operator">=</span> integerValue<span class="token punctuation">;</span> <span class="token comment">// 自动拆箱，等同于 integerValue.intValue()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_06、引用数据类型" tabindex="-1"><a class="header-anchor" href="#_06、引用数据类型" aria-hidden="true">#</a> 06、引用数据类型</h3><p>基本数据类型在作为成员变量和静态变量的时候有默认值，引用数据类型也有的（学完数组&amp;字符串，以及面向对象编程后会更加清楚，这里先简单过一下）。</p>`,3),N={href:"https://javabetter.cn/string/immutable.html",target:"_blank",rel:"noopener noreferrer"},O=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 微信搜「沉默王二」，回复关键字 PDF
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalRef</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> a<span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token class-name">String</span> b<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">LocalRef</span> lv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lv<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>null
null
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,3),F={href:"https://javabetter.cn/exception/npe.html",target:"_blank",rel:"noopener noreferrer"},P=n("code",null,"NullPointerException",-1),R=n("p",null,"也就是说，引用数据类型的默认值为 null，包括数组和接口。",-1),T={href:"https://javabetter.cn/array/array.html",target:"_blank",rel:"noopener noreferrer"},G={href:"https://javabetter.cn/oo/interface.html",target:"_blank",rel:"noopener noreferrer"},U=t(`<p>先来看数组：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arrays <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrays<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>arrays 是一个 int 类型的数组，对吧？打印结果如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[I@2d209079
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>[I</code> 表示数组是 int 类型的，@ 后面是十六进制的 hashCode——这样的打印结果太“人性化”了，一般人表示看不懂！为什么会这样显示呢？查看一下 <code>java.lang.Object</code> 类的 <code>toString()</code> 方法就明白了。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/core-grammar/nine-06.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>数组虽然没有显式定义成一个类，但它的确是一个对象，继承了祖先类 Object 的所有方法。那为什么数组不单独定义一个类来表示呢？就像字符串 String 类那样呢？</p><p>一个合理的解释是 Java 将其隐藏了。假如真的存在一个 Array.java，我们也可以假想它真实的样子，它必须要定义一个容器来存放数组的元素，就像 String 类那样。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span>
    <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">,</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/** The value is used for character storage. */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数组内部定义数组？没必要的！</p><p>再来看接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,12),H={href:"https://javabetter.cn/collection/gailan.html",target:"_blank",rel:"noopener noreferrer"},K=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),M={href:"https://javabetter.cn/collection/arraylist.html",target:"_blank",rel:"noopener noreferrer"},W=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span>
        <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">RandomAccess</span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span>
<span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于接口类型的引用变量来说，你没法直接 new 一个：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/core-grammar/nine-07.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>只能 new 一个实现它的类的对象——那自然接口也是引用数据类型了。</p><p>来看一下基本数据类型和引用数据类型之间最大的差别。</p><p>基本数据类型：</p><ul><li>1、变量名指向具体的数值。</li><li>2、基本数据类型存储在栈上。</li></ul><p>引用数据类型：</p><ul><li>1、变量名指向的是存储对象的内存地址，在栈上。</li><li>2、内存地址指向的对象存储在堆上。</li></ul><h3 id="_07、堆和栈" tabindex="-1"><a class="header-anchor" href="#_07、堆和栈" aria-hidden="true">#</a> 07、堆和栈</h3><p>看到这，三妹是不是又要问，“堆是什么，栈又是什么？”</p><p>堆是堆（heap），栈是栈（stack），如果看到“堆栈”的话，请不要怀疑自己，那是翻译的错，堆栈也是栈，反正我很不喜欢“堆栈”这种叫法，容易让新人掉坑里。</p><p>堆是在程序运行时在内存中申请的空间（可理解为动态的过程）；切记，不是在编译时；因此，Java 中的对象就放在这里，这样做的好处就是：</p><blockquote><p>当需要一个对象时，只需要通过 new 关键字写一行代码即可，当执行这行代码时，会自动在内存的“堆”区分配空间——这样就很灵活。</p></blockquote><p>栈，能够和处理器（CPU，也就是脑子）直接关联，因此访问速度更快。既然访问速度快，要好好利用啊！Java 就把对象的引用放在栈里。为什么呢？因为引用的使用频率高吗？</p><p>不是的，因为 Java 在编译程序时，必须明确的知道存储在栈里的东西的生命周期，否则就没法释放旧的内存来开辟新的内存空间存放引用——空间就那么大，前浪要把后浪拍死在沙滩上啊。</p><p>这么说就理解了吧？</p>`,17),Q={href:"https://www.zhihu.com/question/19729973/answer/2238950166",target:"_blank",rel:"noopener noreferrer"},X=t(`<p>用图来表示一下，左侧是栈，右侧是堆。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/basic-grammar/basic-data-type-dc26645a-3ed8-4ad4-815d-52528ad12d6b.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里再补充一些额外的知识点，能看懂就继续吸收，看不懂可以先去学下一节，以后再来补，没关系的。学习就是这样，可以跳过，可以温故。</p><p>举个例子。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;沉默王二&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5),Y={href:"https://javabetter.cn/string/constant-pool.html",target:"_blank",rel:"noopener noreferrer"},Z=t(`<p>那么对于这样一段代码，有基本数据类型的变量，有引用类型的变量，堆和栈都是如何存储他们的呢？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token class-name">Object</span> o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我来画个图表示下。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/basic-grammar/basic-data-type-3d5b3e40-1abb-4624-8282-b83e58388825.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>应该一目了然了吧？</p><p>“好了，三妹，关于 Java 中的数据类型就先说这么多吧，你是不是已经清楚了？”转动了一下僵硬的脖子后，我对三妹说。</p><h3 id="_08、小结" tabindex="-1"><a class="header-anchor" href="#_08、小结" aria-hidden="true">#</a> 08、小结</h3><p>本文详细探讨了 Java 数据类型，包括比特与字节、基本数据类型、单精度与双精度、int 与 char 互转、包装器类型、引用数据类型以及堆与栈的内存模型。通过阅读本文，你将全面了解 Java 数据类型的概念与使用方法，为 Java 编程打下坚实基础。</p><hr>`,9),$={href:"https://github.com/itwanger/toBeBetterJavaer",target:"_blank",rel:"noopener noreferrer"},aa={href:"https://javabetter.cn/overview/",target:"_blank",rel:"noopener noreferrer"},na=n("p",null,[a("微信搜 "),n("strong",null,"沉默王二"),a(" 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 "),n("strong",null,"222"),a(" 即可免费领取。")],-1),sa=n("figure",null,[n("img",{src:"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function ea(ta,pa){const s=o("ExternalLinkIcon");return c(),l("div",null,[r,n("p",null,[a("除了基本数据类型以外的类型，都是所谓的引用类型。常见的有"),n("a",u,[a("数组"),e(s)]),a("（对，没错，数组是引用类型，后面我们会讲）、class（也就是"),n("a",d,[a("类"),e(s)]),a("），以及"),n("a",k,[a("接口"),e(s)]),a("（指向的是实现接口的类的对象）。")]),v,m,n("p",null,[n("a",b,[a("变量"),e(s)]),a("可以分为局部变量、成员变量、静态变量。")]),h,n("p",null,[a("在进行金融计算或需要精确小数计算的场景中，可以使用 "),n("a",g,[a("BigDecimal 类"),e(s)]),a("来避免浮点数舍入误差。BigDecimal 可以表示一个任意大小且精度完全准确的浮点数。")]),_,n("p",null,[a(`注意，字符字面量应该用单引号（''）包围，而不是双引号（""），因为`),n("a",f,[a("双引号表示字符串字面量"),e(s)]),a("。")]),y,n("p",null,[a("1）可以通过"),n("a",j,[a("强制类型转换"),e(s)]),a("将整型 int 转换为字符 char。")]),w,n("p",null,[a("输出 "),x,a("(其 "),n("a",S,[a("ASCII 值"),e(s)]),a("可以通过整数 65 来表示)。")]),I,n("p",null,[a("因为发生了"),n("a",L,[a("自动类型转换"),e(s)]),a("，后面会细讲。")]),C,n("p",null,[a("包装器类型（Wrapper Types）是 Java 中的一种特殊类型，用于将基本数据类型（如 int、float、char 等）转换为对应的"),n("a",E,[a("对象类型"),e(s)]),a("。")]),J,n("p",null,[a("上面的示例中，我们创建了一个 "),n("a",q,[a("Integer 类型"),e(s)]),a("的对象 integerValue 并为其赋值 42。然后，我们将其值打印到控制台。")]),n("p",null,[a("我们有一个包含数字的"),n("a",V,[a("字符串"),e(s)]),a(" numberString。我们使用 "),D,a(" 方法将其转换为整数 parsedNumber。然后，我们将转换后的值打印到控制台。")]),z,n("p",null,[a("从 Java 5 开始，"),n("a",A,[a("自动装箱（Autoboxing）和自动拆箱（Unboxing）机制"),e(s)]),a("允许我们在基本数据类型和包装器类型之间自动转换，无需显式地调用构造方法或转换方法（链接里会细讲）。")]),B,n("p",null,[n("a",N,[a("String"),e(s)]),a(" 是最典型的引用数据类型，所以我们就拿 String 类举例，看下面这段代码：")]),O,n("p",null,[a("null 在 Java 中是一个很神奇的存在，在你以后的程序生涯中，见它的次数不会少，尤其是伴随着令人烦恼的“"),n("a",F,[a("空指针异常"),e(s)]),a("”，也就是所谓的 "),P,a("。")]),R,n("p",null,[a("那你是不是很好奇，为什么"),n("a",T,[a("数组"),e(s)]),a("和"),n("a",G,[a("接口"),e(s)]),a("也是引用数据类型啊？")]),U,n("p",null,[n("a",H,[a("List"),e(s)]),a(" 是一个非常典型的接口：")]),K,n("p",null,[a("而 "),n("a",M,[a("ArrayList"),e(s)]),a(" 是 List 接口的一个实现：")]),W,n("p",null,[a("如果还不理解的话，可以看一下这个视频，讲的非常不错："),n("a",Q,[a("什么是堆？什么是栈？他们之间有什么区别和联系？"),e(s)])]),X,n("p",null,[a("这段代码会先在堆里创建一个 沉默王二的字符串对象，然后再把对象的引用 a 放到栈里面。这里面还会涉及到"),n("a",Y,[a("字符串常量池"),e(s)]),a("，后面会讲。")]),Z,n("p",null,[a("GitHub 上标星 8700+ 的开源知识库《"),n("a",$,[a("二哥的 Java 进阶之路"),e(s)]),a("》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，可以说是通俗易懂、风趣幽默……详情戳："),n("a",aa,[a("太赞了，GitHub 上标星 8700+ 的 Java 教程"),e(s)])]),na,sa])}const la=p(i,[["render",ea],["__file","basic-data-type.html.vue"]]);export{la as default};
