const t=JSON.parse('{"key":"v-f854807c","path":"/thread/atomic.html","title":"Java atomic包中的原子操作类总结","lang":"zh-CN","frontmatter":{"title":"Java atomic包中的原子操作类总结","shortTitle":"原子操作类总结","description":"Java atomic包中的原子操作类总结","category":["Java核心"],"tag":["Java并发编程"],"head":[["meta",{"name":"keywords","content":"Java,并发编程,多线程,Thread,atomic,原子类"}],["meta",{"property":"og:url","content":"https://javabetter.cn/thread/atomic.html"}],["meta",{"property":"og:site_name","content":"二哥的Java进阶之路"}],["meta",{"property":"og:title","content":"Java atomic包中的原子操作类总结"}],["meta",{"property":"og:description","content":"Java atomic包中的原子操作类总结"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-24T02:39:04.000Z"}],["meta",{"property":"article:author","content":"沉默王二"}],["meta",{"property":"article:tag","content":"Java并发编程"}],["meta",{"property":"article:modified_time","content":"2023-04-24T02:39:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java atomic包中的原子操作类总结\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-24T02:39:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"沉默王二\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"原子操作类介绍","slug":"原子操作类介绍","link":"#原子操作类介绍","children":[]},{"level":2,"title":"预备知识--CAS操作","slug":"预备知识-cas操作","link":"#预备知识-cas操作","children":[]},{"level":2,"title":"原子更新基本类型","slug":"原子更新基本类型","link":"#原子更新基本类型","children":[]},{"level":2,"title":"原子更新数组类型","slug":"原子更新数组类型","link":"#原子更新数组类型","children":[]},{"level":2,"title":"原子更新引用类型","slug":"原子更新引用类型","link":"#原子更新引用类型","children":[]},{"level":2,"title":"原子更新字段类型","slug":"原子更新字段类型","link":"#原子更新字段类型","children":[]}],"git":{"createdTime":1648037338000,"updatedTime":1682303944000,"contributors":[{"name":"itwanger","email":"www.qing_gee@163.com","commits":9},{"name":"沉默王二","email":"www.qing_gee@163.com","commits":1}]},"readingTime":{"minutes":10.22,"words":3067},"filePathRelative":"thread/atomic.md","localizedDate":"2022年3月23日","excerpt":"<h2> 原子操作类介绍</h2>\\n<p>在并发编程中很容易出现并发安全的问题，有一个很简单的例子就是多线程更新变量i=1,比如多个线程执行i++操作，就有可能获取不到正确的值，而这个问题，最常用的方法是通过Synchronized进行控制来达到线程安全的目的。</p>\\n<p>但是由于synchronized是采用的是悲观锁策略，并不是特别高效的一种解决方案。实际上，在J.U.C下的atomic包提供了一系列的操作简单，性能高效，并能保证线程安全的类去更新基本类型变量，数组元素，引用类型以及更新对象中的字段类型。atomic包下的这些类都是采用的是乐观锁策略去原子更新数据，在java中则是使用CAS操作具体实现。</p>"}');export{t as data};
