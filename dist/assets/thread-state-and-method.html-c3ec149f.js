import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o,c,a as n,d as s,b as t,e as l}from"./app-1c5b5ce3.js";const i={},u=l(`<h1 id="_14-3-java-线程的-6-种状态" tabindex="-1"><a class="header-anchor" href="#_14-3-java-线程的-6-种状态" aria-hidden="true">#</a> 14.3 Java 线程的 6 种状态</h1><p>我们先来看看操作系统中的线程状态转换。在操作系统中，线程被视为轻量级的进程，所以<strong>操作系统的线程状态其实和操作系统的进程状态是一致的</strong>。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/thread/thread-state-and-method-f60caaad-ad47-4edc-8d0a-ab736c2e8500.png" alt="系统进程/线程转换图" tabindex="0" loading="lazy"><figcaption>系统进程/线程转换图</figcaption></figure><p>操作系统的线程主要有以下三个状态：</p><ul><li>就绪状态(ready)：线程正在等待使用 CPU，经调度程序调用之后进入 running 状态。</li><li>执行状态(running)：线程正在使用 CPU。</li><li>等待状态(waiting): 线程经过等待事件的调用或者正在等待其他资源（如 I/O）。</li></ul><p>然后我们来看 Java 线程的 6 个状态：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Thread.State 源码</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>
    <span class="token constant">NEW</span><span class="token punctuation">,</span>
    <span class="token constant">RUNNABLE</span><span class="token punctuation">,</span>
    <span class="token constant">BLOCKED</span><span class="token punctuation">,</span>
    <span class="token constant">WAITING</span><span class="token punctuation">,</span>
    <span class="token constant">TIMED_WAITING</span><span class="token punctuation">,</span>
    <span class="token constant">TERMINATED</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="new" tabindex="-1"><a class="header-anchor" href="#new" aria-hidden="true">#</a> NEW</h3><p>处于 NEW 状态的线程此时尚未启动。这里的尚未启动指的是还没调用 Thread 实例的<code>start()</code>方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">testStateNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 NEW</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面可以看出，只是创建了线程而并没有调用 start 方法，此时线程处于 NEW 状态。</p><p><strong>关于 start 的两个引申问题</strong></p><ol><li>反复调用同一个线程的 start 方法是否可行？</li><li>假如一个线程执行完毕（此时处于 TERMINATED 状态），再次调用这个线程的 start 方法是否可行？</li></ol><p>要分析这两个问题，我们先来看看<code>start()</code>的源码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 使用synchronized关键字保证这个方法是线程安全的</span>
<span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// threadStatus != 0 表示这个线程已经被启动过或已经结束了</span>
    <span class="token comment">// 如果试图再次启动这个线程，就会抛出IllegalThreadStateException异常</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>threadStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 将这个线程添加到当前线程的线程组中</span>
    group<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 声明一个变量，用于记录线程是否启动成功</span>
    <span class="token keyword">boolean</span> started <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 使用native方法启动这个线程</span>
        <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果没有抛出异常，那么started被设为true，表示线程启动成功</span>
        started <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token comment">// 在finally语句块中，无论try语句块中的代码是否抛出异常，都会执行</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果线程没有启动成功，就从线程组中移除这个线程</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>started<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                group<span class="token punctuation">.</span><span class="token function">threadStartFailed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果在移除线程的过程中发生了异常，我们选择忽略这个异常</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，在<code>start()</code>内部，有一个 threadStatus 变量。如果它不等于 0，调用<code>start()</code>是会直接抛出异常的。</p><p>接着往下看，有一个 native 的<code>start0()</code>方法。这个方法里并没有对<strong>threadStatus</strong>进行处理。到这里我们仿佛就拿这个 threadStatus 没辙了，通过 debug 的方式再看一下:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testStartMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第一次调用</span>
    thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第二次调用</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我是在 start 方法内部的最开始打的断点：</p><ul><li>第一次调用时 threadStatus 的值是 0。</li><li>第二次调用时 threadStatus 的值不为 0。</li></ul><p>查看当前线程状态的源码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Thread.getState方法源码：</span>
<span class="token keyword">public</span> <span class="token class-name">State</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// get current thread state</span>
    <span class="token keyword">return</span> sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span><span class="token constant">VM</span><span class="token punctuation">.</span><span class="token function">toThreadState</span><span class="token punctuation">(</span>threadStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// sun.misc.VM 源码：</span>
<span class="token comment">// 如果线程的状态值和4做位与操作结果不为0，线程处于RUNNABLE状态。</span>
<span class="token comment">// 如果线程的状态值和1024做位与操作结果不为0，线程处于BLOCKED状态。</span>
<span class="token comment">// 如果线程的状态值和16做位与操作结果不为0，线程处于WAITING状态。</span>
<span class="token comment">// 如果线程的状态值和32做位与操作结果不为0，线程处于TIMED_WAITING状态。</span>
<span class="token comment">// 如果线程的状态值和2做位与操作结果不为0，线程处于TERMINATED状态。</span>
<span class="token comment">// 最后，如果线程的状态值和1做位与操作结果为0，线程处于NEW状态，否则线程处于RUNNABLE状态。</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">State</span> <span class="token function">toThreadState</span><span class="token punctuation">(</span><span class="token keyword">int</span> var0<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>var0 <span class="token operator">&amp;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">State</span><span class="token punctuation">.</span><span class="token constant">RUNNABLE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>var0 <span class="token operator">&amp;</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">State</span><span class="token punctuation">.</span><span class="token constant">BLOCKED</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>var0 <span class="token operator">&amp;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">State</span><span class="token punctuation">.</span><span class="token constant">WAITING</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>var0 <span class="token operator">&amp;</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">State</span><span class="token punctuation">.</span><span class="token constant">TIMED_WAITING</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>var0 <span class="token operator">&amp;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">State</span><span class="token punctuation">.</span><span class="token constant">TERMINATED</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>var0 <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token class-name">State</span><span class="token punctuation">.</span><span class="token constant">NEW</span> <span class="token operator">:</span> <span class="token class-name">State</span><span class="token punctuation">.</span><span class="token constant">RUNNABLE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还记得我们引申的两个问题吗？</p><ol><li>反复调用同一个线程的 start 方法是否可行？</li><li>假如一个线程执行完毕（此时处于 TERMINATED 状态），再次调用这个线程的 start 方法是否可行？</li></ol><p>结合上面的源码可以得到的答案是：</p><blockquote><p>都不行，在调用一次 start 之后，threadStatus 的值会改变（threadStatus !=0），此时再次调用 start 方法会抛出 IllegalThreadStateException 异常。</p><p>threadStatus 为 2 代表当前线程状态为 TERMINATED。</p></blockquote><h3 id="runnable" tabindex="-1"><a class="header-anchor" href="#runnable" aria-hidden="true">#</a> RUNNABLE</h3><p>表示当前线程正在运行中。处于 RUNNABLE 状态的线程在 Java 虚拟机中运行，也有可能在等待 CPU 分配资源。</p><p><strong>Java 中线程的 RUNNABLE 状态</strong></p><p>我们来看看 Thread 源码里对 RUNNABLE 状态的定义：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Thread state for a runnable thread.  A thread in the runnable
 * state is executing in the Java virtual machine but it may
 * be waiting for other resources from the operating system
 * such as processor.
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>意思大家应该都能看得懂，不懂翻译一下（其实前面已经翻译过了）。</p><p>也就是说，Java 线程的<strong>RUNNABLE</strong>状态其实包括了传统操作系统线程的<strong>ready</strong>和<strong>running</strong>两个状态。</p><h3 id="blocked" tabindex="-1"><a class="header-anchor" href="#blocked" aria-hidden="true">#</a> BLOCKED</h3><p>阻塞状态。处于 BLOCKED 状态的线程正等待锁的释放以进入同步区。</p><p>我们用 BLOCKED 状态举个生活中的例子：</p><blockquote><p>假如今天你下班后准备去食堂吃饭。你来到食堂仅有的一个窗口，发现前面已经有个人在窗口前了，此时你必须得等前面的人从窗口离开才行。 <br><br> 假设你是线程 t2，你前面的那个人是线程 t1。此时 t1 占有了锁（食堂唯一的窗口），t2 正在等待锁的释放，所以此时 t2 就处于 BLOCKED 状态。</p></blockquote><h3 id="waiting" tabindex="-1"><a class="header-anchor" href="#waiting" aria-hidden="true">#</a> WAITING</h3><p>等待状态。处于等待状态的线程变成 RUNNABLE 状态需要其他线程唤醒。</p><p>调用如下 3 个方法会使线程进入等待状态：</p><ul><li><code>Object.wait()</code>：使当前线程处于等待状态直到另一个线程唤醒它；</li><li><code>Thread.join()</code>：等待线程执行完毕，底层调用的是 Object 实例的 wait 方法；</li><li><code>LockSupport.park()</code>：除非获得调用许可，否则禁用当前线程进行线程调度。</li></ul><p>我们延续上面的例子继续解释一下 WAITING 状态：</p><blockquote><p>你等了好几分钟，终于轮到你了，突然你们有一个“不懂事”的经理来了。你看到他你就有一种不祥的预感，果然，他是来找你的。</p><p>他把你拉到一旁叫你待会儿再吃饭，说他下午要去作报告，赶紧来找你了解一下项目的情况。你心里虽然有一万个不愿意但是你还是从食堂窗口走开了。</p><p>此时，假设你还是线程 t2，你的经理是线程 t1。虽然你此时都占有锁（窗口）了，“不速之客”来了你还是得释放掉锁。此时你 t2 的状态就是 WAITING。然后经理 t1 获得锁，进入 RUNNABLE 状态。</p><p>要是经理 t1 不主动唤醒你 t2（notify、notifyAll..），可以说你 t2 只能一直等待了。</p></blockquote><h3 id="timed-waiting" tabindex="-1"><a class="header-anchor" href="#timed-waiting" aria-hidden="true">#</a> TIMED_WAITING</h3><p>超时等待状态。线程等待一个具体的时间，时间到后会被自动唤醒。</p><p>调用如下方法会使线程进入超时等待状态：</p><ul><li><code>Thread.sleep(long millis)</code>：使当前线程睡眠指定时间；</li><li><code>Object.wait(long timeout)</code>：线程休眠指定时间，等待期间可以通过<code>notify()</code>/<code>notifyAll()</code>唤醒；</li><li><code>Thread.join(long millis)</code>：等待当前线程最多执行 millis 毫秒，如果 millis 为 0，则会一直执行；</li><li><code>LockSupport.parkNanos(long nanos)</code>： 除非获得调用许可，否则禁用当前线程进行线程调度指定时间；</li><li><code>LockSupport.parkUntil(long deadline)</code>：同上，也是禁止线程进行调度指定时间；</li></ul><p>我们继续延续上面的例子来解释一下 TIMED_WAITING 状态：</p><blockquote><p>到了第二天中午，又到了饭点，你还是到了窗口前。</p><p>突然间想起你的同事叫你等他一起，他说让你等他十分钟他改个 bug。</p><p>好吧，那就等等吧，你就离开了窗口。很快十分钟过去了，你见他还没来，你想都等了这么久了还不来，那你还是先去吃饭好了。</p><p>这时你还是线程 t1，你改 bug 的同事是线程 t2。t2 让 t1 等待了指定时间，此时 t1 等待期间就属于 TIMED_WATING 状态。</p><p>t1 等待 10 分钟后，就自动唤醒，拥有了去争夺锁的资格。</p></blockquote><h3 id="terminated" tabindex="-1"><a class="header-anchor" href="#terminated" aria-hidden="true">#</a> TERMINATED</h3><p>终止状态。此时线程已执行完毕。</p><h2 id="线程状态的转换" tabindex="-1"><a class="header-anchor" href="#线程状态的转换" aria-hidden="true">#</a> 线程状态的转换</h2><p>根据上面关于线程状态的介绍我们可以得到下面的<strong>线程状态转换图</strong>：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/thread/thread-state-and-method-18f0d338-1c19-4e18-a0cc-62e97fc39272.png" alt="线程状态转换图" tabindex="0" loading="lazy"><figcaption>线程状态转换图</figcaption></figure><h3 id="blocked-与-runnable-状态的转换" tabindex="-1"><a class="header-anchor" href="#blocked-与-runnable-状态的转换" aria-hidden="true">#</a> BLOCKED 与 RUNNABLE 状态的转换</h3><p>我们在上面说到：处于 BLOCKED 状态的线程是因为在等待锁的释放。假如这里有两个线程 a 和 b，a 线程提前获得了锁并且暂未释放锁，此时 b 就处于 BLOCKED 状态。我们先来看一个例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">blockedTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Thread</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Thread</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    a<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    b<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> a<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出？</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> b<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出？</span>
<span class="token punctuation">}</span>

<span class="token comment">// 同步方法争夺锁</span>
<span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>初看之下，大家可能会觉得线程 a 会先调用同步方法，同步方法内又调用了<code>Thread.sleep()</code>方法，必然会输出 TIMED_WAITING，而线程 b 因为等待线程 a 释放锁所以必然会输出 BLOCKED。</p><p>其实不然，有两点需要值得大家注意，一是<strong>在测试方法<code>blockedTest()</code>内还有一个 main 线程</strong>，二是<strong>启动线程后执行 run 方法还是需要消耗一定时间的</strong>。</p><blockquote><p>测试方法的 main 线程只保证了 a，b 两个线程调用 start 方法（转化为 RUNNABLE 状态），如果 CPU 执行效率高一点，还没等两个线程真正开始争夺锁，就已经打印此时两个线程的状态（RUNNABLE）了。</p><p>当然，如果 CPU 执行效率低一点，其中某个线程也是可能打印出 BLOCKED 状态的（此时两个线程已经开始争夺锁了）。</p></blockquote><p>下面是我执行了几次的结果对比：</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/thread-state-and-method-20230707215909.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这时你可能又会问了，要是我想要打印出 BLOCKED 状态我该怎么处理呢？BLOCKED 状态的产生需要两个线程争夺锁才行。那我们处理下测试方法里的 main 线程就可以了，让它“休息一会儿”，调用一下<code>Thread.sleep()</code>方法。</p><p>这里需要注意的是 main 线程休息的时间，要保证在线程争夺锁的时间内，不要等到前一个线程锁都释放了你再去争夺锁，此时还是得不到 BLOCKED 状态的。</p><p>我们把上面的测试方法 blockedTest 改动一下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">blockedTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    ······
    a<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 需要注意这里main线程休眠了1000毫秒，而testMethod()里休眠了2000毫秒</span>
    b<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> a<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出？</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> b<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出？</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果如下所示：</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/thread-state-and-method-20230707220120.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在这个例子中两个线程的状态转换如下</p><ul><li>a 的状态转换过程：RUNNABLE（<code>a.start()</code>） -&gt; TIMED_WATING（<code>Thread.sleep()</code>）-&gt;RUNABLE（<code>sleep()</code>时间到）-&gt;<em>BLOCKED(未抢到锁)</em> -&gt; TERMINATED</li><li>b 的状态转换过程：RUNNABLE（<code>b.start()</code>) -&gt; <em>BLOCKED(未抢到锁)</em> -&gt;TERMINATED</li></ul><blockquote><p>斜体表示可能出现的状态， 大家可以在自己的电脑上多试几次看看输出。同样，这里的输出也可能有多钟结果。</p></blockquote><h3 id="waiting-状态与-runnable-状态的转换" tabindex="-1"><a class="header-anchor" href="#waiting-状态与-runnable-状态的转换" aria-hidden="true">#</a> WAITING 状态与 RUNNABLE 状态的转换</h3><p>根据转换图我们知道有 3 个方法可以使线程从 RUNNABLE 状态转为 WAITING 状态。我们主要介绍下<strong>Object.wait()<strong>和</strong>Thread.join()</strong>。</p><p><strong>Object.wait()</strong></p><blockquote><p>调用<code>wait()</code>方法前线程必须持有对象的锁。</p><p>线程调用<code>wait()</code>方法时，会释放当前的锁，直到有其他线程调用<code>notify()</code>/<code>notifyAll()</code>方法唤醒等待锁的线程。</p><p>需要注意的是，其他线程调用<code>notify()</code>方法只会唤醒单个等待锁的线程，如有有多个线程都在等待这个锁的话不一定会唤醒到之前调用<code>wait()</code>方法的线程。</p><p>同样，调用<code>notifyAll()</code>方法唤醒所有等待锁的线程之后，也不一定会马上把时间片分给刚才放弃锁的那个线程，具体要看系统的调度。</p></blockquote><p><strong>Thread.join()</strong></p><blockquote><p>调用<code>join()</code>方法，会一直等待这个线程执行完毕（转换为 TERMINATED 状态）。</p></blockquote><p>我们再把上面的例子线程启动那里改变一下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">blockedTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ······
    a<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    a<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    b<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> a<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 TERMINATED</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> b<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要是没有调用 join 方法，main 线程不管 a 线程是否执行完毕都会继续往下走。</p><p>a 线程启动之后马上调用了 join 方法，这里 main 线程就会等到 a 线程执行完毕，所以这里 a 线程打印的状态固定是<strong>TERMINATED</strong>。</p><p>至于 b 线程的状态，有可能打印 RUNNABLE（尚未进入同步方法），也有可能打印 TIMED_WAITING（进入了同步方法）。</p><h3 id="timed-waiting-与-runnable-状态转换" tabindex="-1"><a class="header-anchor" href="#timed-waiting-与-runnable-状态转换" aria-hidden="true">#</a> TIMED_WAITING 与 RUNNABLE 状态转换</h3><p>TIMED_WAITING 与 WAITING 状态类似，只是 TIMED_WAITING 状态等待的时间是指定的。</p><p><strong>Thread.sleep(long)</strong></p><blockquote><p>使当前线程睡眠指定时间。需要注意这里的“睡眠”只是暂时使线程停止执行，并不会释放锁。时间到后，线程会重新进入 RUNNABLE 状态。</p></blockquote><p><strong>Object.wait(long)</strong></p><blockquote><p><code>wait(long)</code>方法使线程进入 TIMED_WAITING 状态。这里的<code>wait(long)</code>方法与无参方法 wait()相同的地方是，都可以通过其他线程调用<code>notify()</code>或<code>notifyAll()</code>方法来唤醒。</p><p>不同的地方是，有参方法<code>wait(long)</code>就算其他线程不来唤醒它，经过指定时间 long 之后它会自动唤醒，拥有去争夺锁的资格。</p></blockquote><p><strong>Thread.join(long)</strong></p><blockquote><p><code>join(long)</code>使当前线程执行指定时间，并且使线程进入 TIMED_WAITING 状态。</p><p>我们再来改一改刚才的示例:</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">blockedTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ······
    a<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    a<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    b<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> a<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 TIEMD_WAITING</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> b<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里调用<code>a.join(1000L)</code>，因为是指定了具体 a 线程执行的时间的，并且执行时间是小于 a 线程 sleep 的时间，所以 a 线程状态输出 TIMED_WAITING。</p><p>b 线程状态仍然不固定（RUNNABLE 或 BLOCKED）。</p><h3 id="线程中断" tabindex="-1"><a class="header-anchor" href="#线程中断" aria-hidden="true">#</a> 线程中断</h3><blockquote><p>在某些情况下，我们在线程启动后发现并不需要它继续执行下去时，需要中断线程。目前在 Java 里还没有安全直接的方法来停止线程，但是 Java 提供了线程中断机制来处理需要中断线程的情况。</p><p>线程中断机制是一种协作机制。需要注意，通过中断操作并不能直接终止一个线程，而是通知需要被中断的线程自行处理。</p></blockquote><p>简单介绍下 Thread 类里提供的关于线程中断的几个方法：</p><ul><li><code>Thread.interrupt()</code>：中断线程。这里的中断线程并不会立即停止线程，而是设置线程的中断状态为 true（默认是 flase）；</li><li><code>Thread.currentThread().isInterrupted()</code>：测试当前线程是否被中断。线程的中断状态受这个方法的影响，意思是调用一次使线程中断状态设置为 true，连续调用两次会使得这个线程的中断状态重新转为 false；</li><li><code>Thread.isInterrupted()</code>：测试当前线程是否被中断。与上面方法不同的是调用这个方法并不会影响线程的中断状态。</li></ul><blockquote><p>在线程中断机制里，当其他线程通知需要被中断的线程后，线程中断的状态被设置为 true，但是具体被要求中断的线程要怎么处理，完全由被中断线程自己而定，可以在合适的实际处理中断请求，也可以完全不处理继续执行下去。</p></blockquote><hr>`,99),r=n("p",null,"编辑：沉默王二，内容大部分来源以下三个开源仓库：",-1),d={href:"http://concurrent.redspider.group/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/CL0610/Java-concurrency",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/CoderLeixiaoshuai/java-eight-part",target:"_blank",rel:"noopener noreferrer"},m=n("hr",null,null,-1),b={href:"https://github.com/itwanger/toBeBetterJavaer",target:"_blank",rel:"noopener noreferrer"},h={href:"https://javabetter.cn/overview/",target:"_blank",rel:"noopener noreferrer"},g=n("p",null,[s("微信搜 "),n("strong",null,"沉默王二"),s(" 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 "),n("strong",null,"222"),s(" 即可免费领取。")],-1),f=n("figure",null,[n("img",{src:"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function T(N,y){const a=e("ExternalLinkIcon");return o(),c("div",null,[u,n("blockquote",null,[r,n("ul",null,[n("li",null,[n("a",d,[s("深入浅出 Java 多线程"),t(a)])]),n("li",null,[n("a",k,[s("并发编程知识总结"),t(a)])]),n("li",null,[n("a",v,[s("Java 八股文"),t(a)])])])]),m,n("p",null,[s("GitHub 上标星 8700+ 的开源知识库《"),n("a",b,[s("二哥的 Java 进阶之路"),t(a)]),s("》第一版 PDF 终于来了！包括 Java 基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM 等等，共计 32 万余字，可以说是通俗易懂、风趣幽默……详情戳："),n("a",h,[s("太赞了，GitHub 上标星 8700+ 的 Java 教程"),t(a)])]),g,f])}const I=p(i,[["render",T],["__file","thread-state-and-method.html.vue"]]);export{I as default};
