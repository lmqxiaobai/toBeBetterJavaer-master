const e=JSON.parse('{"key":"v-15bcbd48","path":"/nice-article/aliyun/tantwgzzdgsjmsalykfzsq.html","title":"谈谈我工作中的23个设计模式-阿里云开发者社区","lang":"zh-CN","frontmatter":{"title":"谈谈我工作中的23个设计模式-阿里云开发者社区","shortTitle":"谈谈我工作中的23个设计模式-阿里云开发者社区","description":"从基础的角度看，设计模式是研究类本身或者类与类之间的协作模式，是进行抽象归纳的一个很好的速成思路。后面阅读设计模式后，为了加深理解，对相关图片进行了描绘和微调。从技术的角度已经有很多好的总结，本文会换一种角度思考，既然设计模式研究的是类与类的关系，我们作为工作的个体，一些工作中的策略是不是也可以进行类比，可以更好地去思考这些模式？答案是肯定的。","tag":["优质文章"],"category":["阿里云"],"head":[["meta",{"name":"keywords","content":"设计模式,缓存,算法,安全,项目管理,开发者"}],["meta",{"property":"og:url","content":"https://javabetter.cn/nice-article/aliyun/tantwgzzdgsjmsalykfzsq.html"}],["meta",{"property":"og:site_name","content":"二哥的Java进阶之路"}],["meta",{"property":"og:title","content":"谈谈我工作中的23个设计模式-阿里云开发者社区"}],["meta",{"property":"og:description","content":"从基础的角度看，设计模式是研究类本身或者类与类之间的协作模式，是进行抽象归纳的一个很好的速成思路。后面阅读设计模式后，为了加深理解，对相关图片进行了描绘和微调。从技术的角度已经有很多好的总结，本文会换一种角度思考，既然设计模式研究的是类与类的关系，我们作为工作的个体，一些工作中的策略是不是也可以进行类比，可以更好地去思考这些模式？答案是肯定的。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-12-26T13:49:42.000Z"}],["meta",{"property":"article:author","content":"沉默王二"}],["meta",{"property":"article:tag","content":"优质文章"}],["meta",{"property":"article:modified_time","content":"2022-12-26T13:49:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"谈谈我工作中的23个设计模式-阿里云开发者社区\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-12-26T13:49:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"沉默王二\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"创建型模式 5","slug":"创建型模式-5","link":"#创建型模式-5","children":[{"level":3,"title":"抽象工厂（Abstract Factory）：多套方案","slug":"抽象工厂-abstract-factory-多套方案","link":"#抽象工厂-abstract-factory-多套方案","children":[]},{"level":3,"title":"生成器（Builder）：善于分解","slug":"生成器-builder-善于分解","link":"#生成器-builder-善于分解","children":[]},{"level":3,"title":"工厂方法（Factory Method）：抽象思考","slug":"工厂方法-factory-method-抽象思考","link":"#工厂方法-factory-method-抽象思考","children":[]},{"level":3,"title":"原型（Prototype）：传承知识","slug":"原型-prototype-传承知识","link":"#原型-prototype-传承知识","children":[]},{"level":3,"title":"单件（Singleton）：专注","slug":"单件-singleton-专注","link":"#单件-singleton-专注","children":[]}]},{"level":2,"title":"结构型模式 7","slug":"结构型模式-7","link":"#结构型模式-7","children":[{"level":3,"title":"适配器（Adapter）：适应能力","slug":"适配器-adapter-适应能力","link":"#适配器-adapter-适应能力","children":[]},{"level":3,"title":"桥接（Bridge）：合理关系","slug":"桥接-bridge-合理关系","link":"#桥接-bridge-合理关系","children":[]},{"level":3,"title":"组合（Composite）：递归思考","slug":"组合-composite-递归思考","link":"#组合-composite-递归思考","children":[]},{"level":3,"title":"装饰（Decorator）：增量价值","slug":"装饰-decorator-增量价值","link":"#装饰-decorator-增量价值","children":[]},{"level":3,"title":"外观（Facade）：深入浅出","slug":"外观-facade-深入浅出","link":"#外观-facade-深入浅出","children":[]},{"level":3,"title":"享元（Flyweight）：善于链接","slug":"享元-flyweight-善于链接","link":"#享元-flyweight-善于链接","children":[]},{"level":3,"title":"代理（Proxy）：理解保护","slug":"代理-proxy-理解保护","link":"#代理-proxy-理解保护","children":[]}]},{"level":2,"title":"行为型模式 11","slug":"行为型模式-11","link":"#行为型模式-11","children":[{"level":3,"title":"责任链（Chain of Responsibility）：能力与责任","slug":"责任链-chain-of-responsibility-能力与责任","link":"#责任链-chain-of-responsibility-能力与责任","children":[]},{"level":3,"title":"命令（Command）：加强合作","slug":"命令-command-加强合作","link":"#命令-command-加强合作","children":[]},{"level":3,"title":"解释器（Interpreter）：加强理解","slug":"解释器-interpreter-加强理解","link":"#解释器-interpreter-加强理解","children":[]},{"level":3,"title":"迭代器（Iterator）：横向职责","slug":"迭代器-iterator-横向职责","link":"#迭代器-iterator-横向职责","children":[]},{"level":3,"title":"中介者（Mediator）：协调能力","slug":"中介者-mediator-协调能力","link":"#中介者-mediator-协调能力","children":[]},{"level":3,"title":"备忘录（Memento）：小步快跑","slug":"备忘录-memento-小步快跑","link":"#备忘录-memento-小步快跑","children":[]},{"level":3,"title":"观察者（Observer）：主观能动性","slug":"观察者-observer-主观能动性","link":"#观察者-observer-主观能动性","children":[]},{"level":3,"title":"状态（State）：管理自己","slug":"状态-state-管理自己","link":"#状态-state-管理自己","children":[]},{"level":3,"title":"策略（Strategy）：理解决策","slug":"策略-strategy-理解决策","link":"#策略-strategy-理解决策","children":[]},{"level":3,"title":"模板（Template）：标准化能力","slug":"模板-template-标准化能力","link":"#模板-template-标准化能力","children":[]},{"level":3,"title":"访问者（Visitor）：学会放手","slug":"访问者-visitor-学会放手","link":"#访问者-visitor-学会放手","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1669958072000,"updatedTime":1672062582000,"contributors":[{"name":"itwanger","email":"www.qing_gee@163.com","commits":3}]},"readingTime":{"minutes":12.61,"words":3784},"filePathRelative":"nice-article/aliyun/tantwgzzdgsjmsalykfzsq.md","localizedDate":"2022年12月2日","excerpt":"<p>从基础的角度看，设计模式是研究类本身或者类与类之间的协作模式，是进行抽象归纳的一个很好的速成思路。为了加深理解，我对相关图片进行了描绘和微调。</p>\\n<p>从技术的角度已经有很多好的总结，本文会换一种角度思考，既然设计模式研究的是类与类的关系，我们作为工作的个体，一些工作中的策略是不是也可以进行类比，可以更好地去思考这些模式？答案是肯定的。</p>\\n<h2> 创建型模式 5</h2>\\n<h3> 抽象工厂（Abstract Factory）：多套方案</h3>\\n<p>抽象工厂模式是对创建不同的产品类型的抽象。对应到工作中，我们的确应该具备提供多套方案的能力，这也是我们常说的，要提供选择题。当你有这样的前瞻意识，一般也会被打上思考较多的标签，但是内在来说，的确想问题更加全面了。</p>"}');export{e as data};
