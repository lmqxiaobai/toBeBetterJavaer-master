const e=JSON.parse('{"key":"v-a2340bea","path":"/jvm/jit.html","title":"Java即时编译（JIT）器原理解析及实践","lang":"zh-CN","frontmatter":{"title":"Java即时编译（JIT）器原理解析及实践","shortTitle":"JIT原理解析及实践","category":["Java核心"],"tag":["Java虚拟机"],"description":"二哥的Java进阶之路，小白的零基础Java教程，从入门到进阶，Java即时编译（JIT）器原理解析及实践","head":[["meta",{"name":"keywords","content":"Java,JavaSE,教程,二哥的Java进阶之路,jvm,Java虚拟机,jit"}],["meta",{"property":"og:url","content":"https://javabetter.cn/jvm/jit.html"}],["meta",{"property":"og:site_name","content":"二哥的Java进阶之路"}],["meta",{"property":"og:title","content":"Java即时编译（JIT）器原理解析及实践"}],["meta",{"property":"og:description","content":"二哥的Java进阶之路，小白的零基础Java教程，从入门到进阶，Java即时编译（JIT）器原理解析及实践"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-24T02:39:04.000Z"}],["meta",{"property":"article:author","content":"沉默王二"}],["meta",{"property":"article:tag","content":"Java虚拟机"}],["meta",{"property":"article:modified_time","content":"2023-04-24T02:39:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java即时编译（JIT）器原理解析及实践\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-24T02:39:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"沉默王二\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"一、导读","slug":"一、导读","link":"#一、导读","children":[]},{"level":2,"title":"二、Java的执行过程","slug":"二、java的执行过程","link":"#二、java的执行过程","children":[{"level":3,"title":"1. JVM中的编译器","slug":"_1-jvm中的编译器","link":"#_1-jvm中的编译器","children":[]},{"level":3,"title":"2. 分层编译","slug":"_2-分层编译","link":"#_2-分层编译","children":[]},{"level":3,"title":"3. 即时编译的触发","slug":"_3-即时编译的触发","link":"#_3-即时编译的触发","children":[]}]},{"level":2,"title":"三、编译优化","slug":"三、编译优化","link":"#三、编译优化","children":[{"level":3,"title":"1. 中间表达形式（Intermediate Representation）","slug":"_1-中间表达形式-intermediate-representation","link":"#_1-中间表达形式-intermediate-representation","children":[]},{"level":3,"title":"2.方法内联","slug":"_2-方法内联","link":"#_2-方法内联","children":[]},{"level":3,"title":"3. 逃逸分析","slug":"_3-逃逸分析","link":"#_3-逃逸分析","children":[]},{"level":3,"title":"4. Loop Transformations","slug":"_4-loop-transformations","link":"#_4-loop-transformations","children":[]},{"level":3,"title":"5. 窥孔优化与寄存器分配","slug":"_5-窥孔优化与寄存器分配","link":"#_5-窥孔优化与寄存器分配","children":[]}]},{"level":2,"title":"四、实践","slug":"四、实践","link":"#四、实践","children":[{"level":3,"title":"1. 编译相关的重* 要参数","slug":"_1-编译相关的重-要参数","link":"#_1-编译相关的重-要参数","children":[]},{"level":3,"title":"2. 通过JITwatch分析编译日志","slug":"_2-通过jitwatch分析编译日志","link":"#_2-通过jitwatch分析编译日志","children":[]},{"level":3,"title":"3. 使用Graal编译器","slug":"_3-使用graal编译器","link":"#_3-使用graal编译器","children":[]}]},{"level":2,"title":"五、总结","slug":"五、总结","link":"#五、总结","children":[]}],"git":{"createdTime":1648354033000,"updatedTime":1682303944000,"contributors":[{"name":"itwanger","email":"www.qing_gee@163.com","commits":10},{"name":"沉默王二","email":"www.qing_gee@163.com","commits":2}]},"readingTime":{"minutes":37.69,"words":11307},"filePathRelative":"jvm/jit.md","localizedDate":"2022年3月27日","excerpt":"<h1> Java即时编译（JIT）器原理解析及实践</h1>\\n<h2> 一、导读</h2>\\n<p>常见的编译型语言如C++，通常会把代码直接编译成CPU所能理解的机器码来运行。而Java为了实现“一次编译，处处运行”的特性，把编译的过程分成两部分，首先它会先由javac编译成通用的中间形式——字节码，然后再由解释器逐条将字节码解释为机器码来执行。所以在性能上，Java通常不如C++这类编译型语言。</p>\\n<p>为了优化Java的性能 ，JVM在解释器之外引入了即时（Just In Time）编译器：当程序运行时，解释器首先发挥作用，代码可以直接执行。随着时间推移，即时编译器逐渐发挥作用，把越来越多的代码编译优化成本地代码，来获取更高的执行效率。解释器这时可以作为编译运行的降级手段，在一些不可靠的编译优化出现问题时，再切换回解释执行，保证程序可以正常运行。</p>"}');export{e as data};
