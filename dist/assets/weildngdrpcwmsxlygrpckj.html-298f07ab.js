import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as c,c as o,a as n,d as s,b as p,e as l}from"./app-1c5b5ce3.js";const i={},u=l(`<p>如今，分布式系统大行其道，RPC 有着举足轻重的地位。Dubbo、Thrift、gRpc 等框架各领风骚，学习RPC是新手也是老鸟的必修课。本文带你手撸一个rpc-spring-starter，深入学习和理解rpc相关技术，包括但不限于 RPC 原理、动态代理、Javassist 字节码增强、服务注册与发现、Netty 网络通讯、传输协议、序列化、包压缩、TCP 粘包、拆包、长连接复用、心跳检测、SpringBoot 自动装载、服务分组、接口版本、客户端连接池、负载均衡、异步调用等知识，<strong>值得收藏。</strong></p><h2 id="rpc定义" tabindex="-1"><a class="header-anchor" href="#rpc定义" aria-hidden="true">#</a> RPC定义</h2><p>远程服务调用（Remote procedure call）的概念历史已久，1981年就已经被提出，最初的目的就是为了<strong>调用远程方法像调用本地方法一样简单</strong>，经历了四十多年的更新与迭代，RPC 的大体思路已经趋于稳定，如今百家争鸣的 RPC 协议和框架，诸如 Dubbo （阿里）、Thrift（FaceBook）、gRpc（Google）、brpc （百度）等都在不同侧重点去解决最初的目的，有的想极致完美，有的追求极致性能，有的偏向极致简单。</p><h2 id="rpc基本原理" tabindex="-1"><a class="header-anchor" href="#rpc基本原理" aria-hidden="true">#</a> RPC基本原理</h2><p>让我们回到 RPC 最初的目的，要想实现<strong>调用远程方法想调用本地方法一样简单</strong>，至少要解决如下问题：</p><ol><li>如何获取可用的远程服务器</li><li>如何表示数据</li><li>如何传递数据</li><li>服务端如何确定并调用目标方法</li></ol><p>上述四点问题，都能与现在分布式系统火热的术语一一对应，如何获取可用的远程服务器（服务注册与发现）、如何表示数据（序列化与反序列化）、如何传递数据（网络通讯）、服务端如何确定并调用目标方法（调用方法映射）。笔者将通过一个简单 RPC 项目来解决这些问题。</p><p>首先来看 RPC 的整体系统架构图：</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_jpg/qm3R3LeH8rZzymcdNKqL6PJCicpr3xo5PTGwc3ibvg7vgLrLoj2Roia2u7QD2MK0SiaejsjnUOrlhKeG2EPxgPs9bQ/640?wx_fmt=jpeg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>图中服务端启动时将自己的服务节点信息注册到注册中心，客户端调用远程方法时会订阅注册中心中的可用服务节点信息，拿到可用服务节点之后远程调用方法，当注册中心中的可用服务节点发生变化时会通知客户端，避免客户端继续调用已经失效的节点。那客户端是如何调用远程方法的呢，来看一下远程调用示意图：</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_jpg/qm3R3LeH8rZzymcdNKqL6PJCicpr3xo5PicEecuR5TkqVABia0mudMdXLWiasZpBia0EDPN1gNZPCwzTppjLAFjqIvw/640?wx_fmt=jpeg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>客户端模块代理所有远程方法的调用</li><li>将目标服务、目标方法、调用目标方法的参数等必要信息序列化</li><li>序列化之后的数据包进一步压缩，压缩后的数据包通过网络通信传输到目标服务节点</li><li>服务节点将接受到的数据包进行解压</li><li>解压后的数据包反序列化成目标服务、目标方法、目标方法的调用参数</li><li>通过服务端代理调用目标方法获取结果，结果同样需要序列化、压缩然后回传给客户端</li></ol><p>通过以上描述，相信读者应该大体上了解了 RPC 是如何工作的，接下来看如何使用代码具体实现上述的流程。鉴于篇幅笔者会选择重要或者网络上介绍相对较少的模块来讲述。</p><h2 id="rpc实现细节" tabindex="-1"><a class="header-anchor" href="#rpc实现细节" aria-hidden="true">#</a> RPC实现细节</h2><h3 id="_1-服务注册与发现" tabindex="-1"><a class="header-anchor" href="#_1-服务注册与发现" aria-hidden="true">#</a> 1. 服务注册与发现</h3><p>作为一个入门项目，我们的系统选用 Zookeeper 作为注册中心， ZooKeeper 将数据保存在内存中，性能很高。在<code>读</code>多<code>写</code>少的场景中尤其适用，因为<code>写</code>操作会导致所有的服务器间同步状态。服务注册与发现是典型的<code>读</code>多<code>写</code>少的协调服务场景。Zookeeper 是一个典型的CP系统，在服务选举或者集群半数机器宕机时是不可用状态，相对于服务发现中主流的AP系统来说，可用性稍低，但是用于理解RPC的实现，也是绰绰有余。</p><h4 id="zookeeper节点介绍" tabindex="-1"><a class="header-anchor" href="#zookeeper节点介绍" aria-hidden="true">#</a> ZooKeeper节点介绍</h4><ul><li>持久节点( PERSISENT )：一旦创建，除非主动调用删除操作，否则一直持久化存储。</li><li>临时节点( EPHEMERAL )：与客户端会话绑定，客户端会话失效，这个客户端所创建的所有临时节点都会被删除除。</li><li>节点顺序( SEQUENTIAL )：创建子节点时，如果设置SEQUENTIAL属性，则会自动在节点名后追加一个整形数字，上限是整形的最大值；同一目录下共享顺序，例如（/a0000000001，/b0000000002，/c0000000003，/test0000000004）。</li></ul><h4 id="zookeeper服务注册" tabindex="-1"><a class="header-anchor" href="#zookeeper服务注册" aria-hidden="true">#</a> ZooKeeper服务注册</h4><p>在 ZooKeeper 根节点下根据服务名创建持久节点 <code>/rpc/{serviceName}/service</code> ，将该服务的所有服务节点使用临时节点创建在 <code>/rpc/{serviceName}/service</code> 目录下，代码如下（为方便展示，后续展示代码都做了删减）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>public void exportService(Service serviceResource) {
  String name = serviceResource.getName();
  String uri = GSON.toJson(serviceResource);
  String servicePath = &quot;rpc/&quot; + name + &quot;/service&quot;;
  zkClient.createPersistent(servicePath, true);
  String uriPath = servicePath + &quot;/&quot; + uri;
  //创建一个新的临时节点，当该节点宕机会话失效时，该临时节点会被清理
  zkClient.createEphemeral(uriPath);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注册效果如图，本地启动两个服务则 service 下有两个服务节点信息：</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_jpg/qm3R3LeH8rZzymcdNKqL6PJCicpr3xo5PexcXqTibkRiaJXZgC8j28aKanaE4LicroFibeKia90v2yIeeh9mx8omfS5g/640?wx_fmt=jpeg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://mmbiz.qpic.cn/mmbiz_jpg/qm3R3LeH8rZzymcdNKqL6PJCicpr3xo5P4bb4wjmyE1JGpgkM1VB5XIibpG4RL4ZHqicjwcozuFpRb3G8HK0xmPNQ/640?wx_fmt=jpeg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>存储的节点信息包括服务名，服务 IP:PORT ，序列化协议，压缩协议等。</p><h4 id="zookeeper服务发现" tabindex="-1"><a class="header-anchor" href="#zookeeper服务发现" aria-hidden="true">#</a> ZooKeeper服务发现</h4><p>客户端启动后，不会立即从注册中心获取可用服务节点，而是在调用远程方法时获取节点信息（懒加载），并放入本地缓存 MAP 中，供后续调用，当注册中心通知目录变化时清空服务所有节点缓存，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Service</span><span class="token punctuation">&gt;</span></span> <span class="token function">getServices</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Service</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token constant">SERVER_MAP</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">String</span> servicePath <span class="token operator">=</span> <span class="token string">&quot;rpc/&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;/service&quot;</span><span class="token punctuation">;</span>
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> children <span class="token operator">=</span> zkClient<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span>servicePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Service</span><span class="token punctuation">&gt;</span></span> serviceList <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>str <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> deCh <span class="token operator">=</span> <span class="token class-name">URLDecoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>deCh<span class="token punctuation">,</span> <span class="token class-name">Service</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token constant">SERVER_MAP</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> serviceList<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> serviceList<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZkChildListenerImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IZkChildListener</span> <span class="token punctuation">{</span>
    <span class="token comment">//监听子节点的删除和新增事件</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleChildChange</span><span class="token punctuation">(</span><span class="token class-name">String</span> parentPath<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> childList<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">//有变动就清空服务所有节点缓存</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> parentPath<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">SERVER_MAP</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PS：美团分布式 ID 生成系统Leaf就使用 Zookeeper 的顺序节点来注册 WorkerID ，临时节点保存节点 IP:PORT 信息。</p><h3 id="_2-客户端实现" tabindex="-1"><a class="header-anchor" href="#_2-客户端实现" aria-hidden="true">#</a> 2. 客户端实现</h3><p>客户端调用本地方法一样调用远程方法的完美体验与 Java 动态代理的强大密不可分。</p><p><code>DefaultRpcBaseProcessor</code> 抽象类实现了 <code>ApplicationListener</code> , <code>onApplicationEvent</code> 方法在 Spring 项目启动完毕会收到时间通知，获取 <code>ApplicationContext</code> 上下文之后开始注入服务 <code>injectService</code> （依赖其他服务）或者启动服务 <code>startServer</code> （自身服务实现）。</p><p><code>injectService</code> 方法会遍历 <code>ApplicationContext</code> 上下文中的所有 <code>Bean</code> ， <code>Bean</code> 中是否有属性使用了 <code>InjectService</code> 注解。有的话生成代理类，注入到 <code>Bean</code> 的属性中。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">DefaultRpcBaseProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ContextRefreshedEvent</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">ContextRefreshedEvent</span> contextRefreshedEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//Spring启动完毕会收到Event</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>contextRefreshedEvent<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">ApplicationContext</span> applicationContext <span class="token operator">=</span> contextRefreshedEvent<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">//保存spring上下文 后续使用</span>
      <span class="token class-name">Container</span><span class="token punctuation">.</span><span class="token function">setSpringContext</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">startServer</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">injectService</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">injectService</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token operator">:</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">Object</span> bean <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">//clazz = clazz.getSuperclass(); aop增强的类生成cglib类，需要Superclass才能获取定义的字段</span>
      <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFields <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">//设置InjectService的代理类</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> declaredFields<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">InjectService</span> injectService <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">InjectService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>injectService <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> fieldClass <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> object <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> clientProxyFactory<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span>fieldClass<span class="token punctuation">,</span> injectService<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> injectService<span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ServerDiscoveryCache</span><span class="token punctuation">.</span><span class="token constant">SERVER_CLASS_NAMES</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fieldClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">startServer</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 <code>ClientProxyFactory</code> 类的 <code>getProxy</code> ，根据服务接口、服务分组、服务版本、是否异步调用来创建该接口的代理类，对该接口的所有方法都会使用创建的代理类来调用。方法调用的实现细节都在 <code>ClientInvocationHandler</code> 中的 <code>invoke</code> 方法，主要内容是，获取服务节点信息，选择调用节点，构建 request 对象，最后调用网络模块发送请求。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientProxyFactory</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">String</span> group<span class="token punctuation">,</span> <span class="token class-name">String</span> version<span class="token punctuation">,</span> <span class="token keyword">boolean</span> async<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> objectCache<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> group <span class="token operator">+</span> version<span class="token punctuation">,</span> clz <span class="token operator">-&gt;</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>clazz<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ClientInvocationHandler</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> group<span class="token punctuation">,</span> version<span class="token punctuation">,</span> async<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ClientInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token class-name">ClientInvocationHandler</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">String</span> group<span class="token punctuation">,</span> <span class="token class-name">String</span> version<span class="token punctuation">,</span> <span class="token keyword">boolean</span> async<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
      
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
            <span class="token comment">//1. 获得服务信息</span>
            <span class="token class-name">String</span> serviceName <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Service</span><span class="token punctuation">&gt;</span></span> serviceList <span class="token operator">=</span> <span class="token function">getServiceList</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Service</span> service <span class="token operator">=</span> loadBalance<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>serviceList<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//2. 构建request对象</span>
            <span class="token class-name">RpcRequest</span> rpcRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RpcRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            rpcRequest<span class="token punctuation">.</span><span class="token function">setServiceName</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            rpcRequest<span class="token punctuation">.</span><span class="token function">setMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            rpcRequest<span class="token punctuation">.</span><span class="token function">setGroup</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">;</span>
            rpcRequest<span class="token punctuation">.</span><span class="token function">setVersion</span><span class="token punctuation">(</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span>
            rpcRequest<span class="token punctuation">.</span><span class="token function">setParameters</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            rpcRequest<span class="token punctuation">.</span><span class="token function">setParametersTypes</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//3. 协议编组</span>
            <span class="token class-name">RpcProtocolEnum</span> messageProtocol <span class="token operator">=</span> <span class="token class-name">RpcProtocolEnum</span><span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">RpcCompressEnum</span> compresser <span class="token operator">=</span> <span class="token class-name">RpcCompressEnum</span><span class="token punctuation">.</span><span class="token function">getCompress</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">getCompress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">RpcResponse</span> response <span class="token operator">=</span> netClient<span class="token punctuation">.</span><span class="token function">sendRequest</span><span class="token punctuation">(</span>rpcRequest<span class="token punctuation">,</span> service<span class="token punctuation">,</span> messageProtocol<span class="token punctuation">,</span> compresser<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">getReturnValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-网络传输" tabindex="-1"><a class="header-anchor" href="#_3-网络传输" aria-hidden="true">#</a> 3. 网络传输</h3><p>客户端封装调用请求对象之后需要通过网络将调用信息发送到服务端，在发送请求对象之前还需要经历序列化、压缩两个阶段。</p><h4 id="序列化与反序列化" tabindex="-1"><a class="header-anchor" href="#序列化与反序列化" aria-hidden="true">#</a> 序列化与反序列化</h4><p>序列化与反序列化的核心作用就是对象的保存与重建，方便客户端与服务端通过字节流传递对象，快速对接交互。</p><ul><li>序列化就是指把 Java 对象转换为字节序列的过程。</li><li>反序列化就是指把字节序列恢复为 Java 对象的过程。</li></ul><p>Java序列化的方式有很多，诸如 JDK 自带的 <code>Serializable</code> 、 <code>Protobuf</code> 、 <code>kryo</code> 等，上述三种笔者自测性能最高的是 <code>Kryo</code> 、其次是 <code>Protobuf</code> 。<code>Json</code> 也不失为一种简单且高效的序列化方法，有很多大道至简的框架采用。序列化接口比较简单，读者可以自行查看实现代码。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MessageProtocol</span> <span class="token punctuation">{</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">marshallingRequest</span><span class="token punctuation">(</span><span class="token class-name">RpcRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>

    <span class="token class-name">RpcRequest</span> <span class="token function">unmarshallingRequest</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>

    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">marshallingResponse</span><span class="token punctuation">(</span><span class="token class-name">RpcResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>

    <span class="token class-name">RpcResponse</span> <span class="token function">unmarshallingResponse</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="压缩与解压" tabindex="-1"><a class="header-anchor" href="#压缩与解压" aria-hidden="true">#</a> 压缩与解压</h4><p>网络通信的成本很高，为了减小网络传输数据包的体积，将序列化之后的字节码压缩不失为一种很好的选择。Gzip 压缩算法比率在3到10倍左右，可以大大节省服务器的网络带宽，各种流行的 web 服务器也都支持 Gzip 压缩算法。Java 接入也比较容易，接入代码可以查看下方接口的实现。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Compresser</span> <span class="token punctuation">{</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">compress</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decompress</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="网络通信" tabindex="-1"><a class="header-anchor" href="#网络通信" aria-hidden="true">#</a> 网络通信</h4><p>万事俱备只欠东风。将请求对象序列化成字节码，并且压缩体积之后，需要使用网络将字节码传输到服务器。常用网络传输协议有 HTTP 、 TCP 、 WebSocke t等。HTTP、WebSocket 是应用层协议，TCP 是传输层协议。有些追求简洁、易用的 RPC 框架也有选择 HTTP 协议的。TCP传输的高可靠性和极致性能是主流RPC框架选择的最主要原因。谈到 Java 生态的通信领域，<code>Netty</code> 的领衔地位短时间内无人能及。选用 Netty 作为网络通信模块， TCP 数据流的粘包、拆包不可避免。</p><p><strong>粘包、拆包问题</strong></p><p>TCP 传输协议是一种面向连接的、可靠的、基于字节流的传输层通信协议。为了最大化传输效率。发送方可能将单个较小数据包合并发送，这种情况就需要接收方来拆包处理数据了。</p><p>Netty 提供了3种类型的解码器来处理 TCP 粘包/拆包问题：</p><ul><li>定长消息解码器：<code>FixedLengthFrameDecoder</code> 。发送方和接收方规定一个固定的消息长度，不够用空格等字符补全，这样接收方每次从接受到的字节流中读取固定长度的字节即可，长度不够就保留本次接受的数据，再在下一个字节流中获取剩下数量的字节数据。</li><li>分隔符解码器：<code>LineBasedFrameDecoder</code> 或 <code>DelimiterBasedFrameDecoder</code>。<code>LineBasedFrameDecoder</code> 是行分隔符解码器，分隔符为 <code>\\n</code> 或 <code>\\r\\n</code> ；<code>DelimiterBasedFrameDecoder</code> 是自定义分隔符解码器，可以定义一个或多个分隔符。接收端在收到的字节流中查找分隔符，然后返回分隔符之前的数据，没找到就继续从下一个字节流中查找。</li><li>数据长度解码器：<code>LengthFieldBasedFrameDecoder</code>。将发送的消息分为 header 和 body，header 存储消息的长度（字节数），body 是发送的消息的内容。同时发送方和接收方要协商好这个 header 的字节数，因为 int 能表示长度，long 也能表示长度。接收方首先从字节流中读取前n（header的字节数）个字节（header），然后根据长度读取等量的字节，不够就从下一个数据流中查找。</li></ul><p>不想使用内置的解码器也可自定义解码器，自定传输协议。</p><p>网络通信这部分内容比较复杂，说来话长，代码易读，读者可先自行阅读代码。后续有机会细说此节内容。</p><h3 id="_5-服务端实现" tabindex="-1"><a class="header-anchor" href="#_5-服务端实现" aria-hidden="true">#</a> 5. 服务端实现</h3><p>客户端通过网络传输将请求对象序列化、压缩之后的字节码传输到服务端之后，同样先通过解压、反序列化将字节码重建为请求对象。有了请求对象之后，就可以进行关键的方法调用环节了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">RequestBaseHandler</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">RpcResponse</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token class-name">RpcRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">//1. 查找目标服务代理对象</span>
        <span class="token class-name">ServiceObject</span> serviceObject <span class="token operator">=</span> serverRegister<span class="token punctuation">.</span><span class="token function">getServiceObject</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RpcResponse</span> response <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">//2. 调用对应的方法</span>
        response <span class="token operator">=</span> <span class="token function">invoke</span><span class="token punctuation">(</span>serviceObject<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//响应客户端</span>
        <span class="token keyword">return</span> response<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//具体代理调用</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">RpcResponse</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">ServiceObject</span> serviceObject<span class="token punctuation">,</span> <span class="token class-name">RpcRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述抽象类 <code>RequestBaseHandler</code> 是调用服务方法的抽象实现 <code>handleRequest</code> 通过请求对象的服务名、服务分组、服务版本在 <code>serverRegister.getServiceObject</code> 获取代理对象。然后调用 <code>invoke</code> 抽象方法来真正通过代理对象调用方法获得结果。</p><ol><li>服务的代理对象怎么产生的？</li><li>如何通过代理对象调用方法？</li></ol><h4 id="生成服务代理对象" tabindex="-1"><a class="header-anchor" href="#生成服务代理对象" aria-hidden="true">#</a> 生成服务代理对象</h4><p>带着上述问题来看 <code>DefaultRpcBaseProcessor</code> 抽象类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">DefaultRpcBaseProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ContextRefreshedEvent</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">ContextRefreshedEvent</span> contextRefreshedEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//Spring启动完毕会收到Event</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>contextRefreshedEvent<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ApplicationContext</span> applicationContext <span class="token operator">=</span> contextRefreshedEvent<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Container</span><span class="token punctuation">.</span><span class="token function">setSpringContext</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">startServer</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">injectService</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">injectService</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">startServer</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>DefaultRpcBaseProcessor</code> 抽象类也有两个实现类 <code>DefaultRpcReflectProcessor</code> 和 <code>DefaultRpcJavassistProcessor</code>，<strong>来实现关键的生成代理对象的 <code>startServer</code> 方法</strong>。</p><h5 id="服务接口实现类的-bean-作为代理对象" tabindex="-1"><a class="header-anchor" href="#服务接口实现类的-bean-作为代理对象" aria-hidden="true">#</a> 服务接口实现类的 <code>Bean</code> 作为代理对象</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultRpcReflectProcessor</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultRpcBaseProcessor</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">startServer</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> beans <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBeansWithAnnotation</span><span class="token punctuation">(</span><span class="token class-name">RpcService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>beans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">boolean</span> startServerFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> obj <span class="token operator">:</span> beans<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token comment">/* 如果只实现了一个接口就用接口的className作为服务名

               * 如果该类实现了多个接口，则使用注解里的value作为服务名

               */</span>
              <span class="token class-name">RpcService</span> service <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">RpcService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>interfaces<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span> value <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ServiceObject</span> so <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceObject</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> obj<span class="token punctuation">,</span> service<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> service<span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> supperClass <span class="token operator">=</span> interfaces<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token class-name">ServiceObject</span> so <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceObject</span><span class="token punctuation">(</span>supperClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> supperClass<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> service<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> service<span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
              serverRegister<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>so<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>DefaultRpcReflectProcessor</code> 中获取到所有有 <code>RpcService</code> 注解的服务接口实现类 <code>Bean</code>，然后将该 <code>Bean</code> 作为服务代理对象注册到 <code>serverRegister</code> 中供上述的反射调用中使用。</p><h5 id="使用-javassist-生成新的代理对象" tabindex="-1"><a class="header-anchor" href="#使用-javassist-生成新的代理对象" aria-hidden="true">#</a> 使用 <code>Javassist</code> 生成新的代理对象</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultRpcJavassistProcessor</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultRpcBaseProcessor</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">startServer</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> beans <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBeansWithAnnotation</span><span class="token punctuation">(</span><span class="token class-name">RpcService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>beans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">boolean</span> startServerFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> beans<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token class-name">String</span> beanName <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token class-name">Object</span> obj  <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredMethods <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token comment">/*

               * 如果只实现了一个接口就用接口的className作为服务名

               * 如果该类实现了多个接口，则使用注解里的value作为服务名

               */</span>
              <span class="token class-name">RpcService</span> service <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">RpcService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>interfaces<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span> value <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//bean实现多个接口时，javassist代理类中生成的方法只按照注解指定的服务类来生成</span>
                declaredMethods <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Object</span> proxy <span class="token operator">=</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">.</span><span class="token function">makeProxy</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> declaredMethods<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ServiceObject</span> so <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceObject</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> proxy<span class="token punctuation">,</span> service<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> service<span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> supperClass <span class="token operator">=</span> interfaces<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token class-name">Object</span> proxy <span class="token operator">=</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">.</span><span class="token function">makeProxy</span><span class="token punctuation">(</span>supperClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> declaredMethods<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ServiceObject</span> so <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceObject</span><span class="token punctuation">(</span>supperClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> supperClass<span class="token punctuation">,</span> proxy<span class="token punctuation">,</span> service<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> service<span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
              serverRegister<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>so<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>DefaultRpcJavassistProcessor</code> 与 <code>DefaultRpcReflectProcessor</code> 的差异在于后者直接将服务实现类对象 <code>Bean</code> 作为服务代理对象，而前者通过 <code>ProxyFactory.makeProxy(value, beanName, declaredMethods)</code> 创建了新的代理对象，将新的代理对象注册到 <code>serverRegister</code> 中供后续调用调用中使用。该方法通过 <code>Javassist</code> 来生成代理类，代码冗长，建议阅读源码。我来通过下面的代码演示实现的代理类。</p><p>首先我们的服务接口是：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HelloService</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务的实现类是:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RpcService</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">HelloService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;a1&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那最终新生成的代理类是这样的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloService</span>$proxy1649315143476 <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>ppphuang<span class="token punctuation">.</span>rpcspringstarter<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span>HelloService</span> serviceProxy <span class="token operator">=</span> 
 <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span>ApplicationContext</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>ppphuang<span class="token punctuation">.</span>rpcspringstarter<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span>Container</span><span class="token punctuation">.</span><span class="token function">getSpringContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;helloServiceImpl&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
    <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>ppphuang<span class="token punctuation">.</span>rpcspringstarter<span class="token punctuation">.</span>common<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span>RpcResponse</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>ppphuang<span class="token punctuation">.</span>rpcspringstarter<span class="token punctuation">.</span>common<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span>RpcRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> params <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span>
           <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token operator">||</span>params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">&quot;String&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> arg0 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            arg0 <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>ppphuang<span class="token punctuation">.</span>rpcspringstarter<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>ConvertUtil</span><span class="token punctuation">.</span><span class="token function">convertToString</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> returnValue <span class="token operator">=</span> serviceProxy<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span>arg0<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>ppphuang<span class="token punctuation">.</span>rpcspringstarter<span class="token punctuation">.</span>common<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span>RpcResponse</span><span class="token punctuation">(</span>returnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  
    <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>ppphuang<span class="token punctuation">.</span>rpcspringstarter<span class="token punctuation">.</span>common<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span>RpcResponse</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>ppphuang<span class="token punctuation">.</span>rpcspringstarter<span class="token punctuation">.</span>common<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span>RpcRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> methodName <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>methodName<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span> returnValue <span class="token operator">=</span> <span class="token function">hello</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>清理全限定类名后，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloService</span>$proxy1649315143476 <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">HelloService</span> serviceProxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span><span class="token punctuation">)</span><span class="token class-name">Container</span><span class="token punctuation">.</span><span class="token function">getSpringContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;helloServiceImpl&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
    <span class="token keyword">public</span> <span class="token class-name">RpcResponse</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">RpcRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> params <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span>
           <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token operator">||</span> params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">&quot;String&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">String</span> arg0 <span class="token operator">=</span> <span class="token class-name">ConvertUtil</span><span class="token punctuation">.</span><span class="token function">convertToString</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> returnValue <span class="token operator">=</span> serviceProxy<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span>arg0<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RpcResponse</span><span class="token punctuation">(</span>returnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">RpcResponse</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">RpcRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> methodName <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>methodName<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">Object</span> returnValue <span class="token operator">=</span> <span class="token function">hello</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>代理类 <code>HelloService$proxy1649315143476</code> 中有一个服务接口类型 <code>HelloService</code> 的静态属性 <code>serviceProxy</code>，值就是通过 <code>ApplicationContext</code> 上下文获取到的服务接口实现类 <code>HelloServiceImpl</code> 这个 <code>Bean</code>（<code>SpringContext</code> 已经被提前缓存到 <code>Container</code> 类中，读者可以自行查找代码了解）。</li><li><code>public RpcResponse invoke(RpcRequest request) throws Exception</code> 该方法判断调用的方法名是 <code>hello</code> 来调用代理类中的<code>hello</code>方法。</li><li><code>public RpcResponse hello(RpcRequest request) throws Exception</code> 该方法通过调用 <code>serviceProxy.hello()</code> 的方法获取结果。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InvokeProxy</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**

     * invoke调用服务接口

     */</span>
    <span class="token class-name">RpcResponse</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">RpcRequest</span> rpcRequest<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>HelloService$proxy1649315143476</code> 类实现 <code>InvokeProxy</code> 接口（<code>ProxyFactory.makeProxy</code> 代码中有体现）。<code>InvokeProxy</code> 接口只有一个 <code>invoke</code> 方法。到这里就能理解通过调用代理对象的 <code>invoke</code> 方法就能间接调用到服务接口实现类 <code>HelloServiceImpl</code> 的对应方法了。</p><h4 id="调用代理对象方法" tabindex="-1"><a class="header-anchor" href="#调用代理对象方法" aria-hidden="true">#</a> 调用代理对象方法</h4><p>理清代理对象的生成之后，开始调用代理对象的方法。</p><p>上文中写到的抽象类 <code>RequestBaseHandler</code> 有两个实现类 <code>RequestJavassistHandler</code> 和 <code>RequestReflectHandler</code>。</p><p><strong>Java 反射调用</strong></p><p>先看 <code>RequestReflectHandler</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestReflectHandler</span> <span class="token keyword">extends</span> <span class="token class-name">RequestBaseHandler</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">RpcResponse</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">ServiceObject</span> serviceObject<span class="token punctuation">,</span> <span class="token class-name">RpcRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">Method</span> method <span class="token operator">=</span> serviceObject<span class="token punctuation">.</span><span class="token function">getClazz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getParametersTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> value <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>serviceObject<span class="token punctuation">.</span><span class="token function">getObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RpcResponse</span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RpcResponse</span><span class="token punctuation">(</span><span class="token class-name">RpcStatusEnum</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        response<span class="token punctuation">.</span><span class="token function">setReturnValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> response<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Object value = method.invoke(serviceObject.getObj(), request.getParameters());</p><p>这行代码都很熟悉，用 Java 框架中最常见的反射来调用代理类中的方法，大部分 RPC 框架也都是这么来实现的。</p><p><strong>通过 Javassists 生成的代理对象 <code>invoke</code> 方法调用</strong></p><p>接着看 <code>RequestJavassistHandler</code>:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestJavassistHandler</span> <span class="token keyword">extends</span> <span class="token class-name">RequestBaseHandler</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">RpcResponse</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">ServiceObject</span> serviceObject<span class="token punctuation">,</span> <span class="token class-name">RpcRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">InvokeProxy</span> invokeProxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InvokeProxy</span><span class="token punctuation">)</span> serviceObject<span class="token punctuation">.</span><span class="token function">getObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> invokeProxy<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接将代理对象转为 <code>InvokeProxy</code>，调用 <code>InvokeProxy.invoke()</code> 方法获得返回值，如果这里不能理解，回头再看一下使用 <code>Javassist</code> 生成新的代理对象这个小节吧。</p><p>调用代理对象的方法获取到结果，仍要通过序列化、压缩后，将字节流数据包通过网络传输到客户端，客户端拿到响应的结果再解压，反序列化得到结果对象。</p><h4 id="javassist介绍" tabindex="-1"><a class="header-anchor" href="#javassist介绍" aria-hidden="true">#</a> Javassist介绍</h4><p><code>Javassist</code> 是一个开源的分析、编辑和创建Java字节码的类库。是由东京工业大学的数学和计算机科学系的  <code>Shigeru Chiba(千叶滋)</code>所创建的。简单来说就是用源码级别的 api 去修改字节码。<code>Duboo</code>、<code>MyBatis</code> 也都使用了 <code>Javassist</code>。Duboo 作者也选择<code>Javassist</code>作为 Duboo 的代理工具，可以点击这里查看 Duboo 作者也选择 <code>Javassist</code> 的原因。</p><p><code>Javassist</code> 还能和谐（pojie）Java 编写的商业软件，例如抓包工具 <code>Charles</code>。代码在这里，供交流学习。</p><p>在使用 <code>Javassist</code> 有踩到如下坑，供大家参考：</p><ol><li><code>Javassist</code> 是运行时，没有 <code>JDK</code> 静态编译过程，<code>JDK</code> 的很多语法糖都是在静态编译过程中处理的，所以需要自行编码处理，例如自动拆装箱。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> ii <span class="token operator">=</span> i<span class="token punctuation">;</span>               <span class="token comment">//javassist 错误 JDK会自动装箱，javassist需要自行编码处理 </span>

<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> ii <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//javassist 正确</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>自定义的类需要使用类的完全限定名，这也是为什么生成的代理类中类都是完全限定名。</li></ol><h4 id="选择哪种代理方式" tabindex="-1"><a class="header-anchor" href="#选择哪种代理方式" aria-hidden="true">#</a> 选择哪种代理方式</h4><p>可以通过配置文件 <code>application.properties</code> 修改 <code>hp.rpc.server-proxy-type</code> 的值来选择代理模式。</p><p>性能测试，机器 Macbook Pro M1 8C 16G， 代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token class-name">ClientProxyFactory</span> clientProxyFactory<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">long</span> l1 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">HelloService</span> proxy <span class="token operator">=</span> clientProxyFactory<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token class-name">HelloService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token string">&quot;group3&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;version3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> ppphuang <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">&quot;ppphuang&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">long</span> l2 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">long</span> l3 <span class="token operator">=</span> l2 <span class="token operator">-</span> l1<span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试结果（ms）：</p><table><thead><tr><th>请求次数</th><th>反射调用1</th><th>反射调用2</th><th>反射调用3</th><th>Javassist1</th><th>Javassist2</th><th>Javassist3</th></tr></thead><tbody><tr><td>10000</td><td>1303</td><td>1159</td><td>1164</td><td>1126</td><td>1235</td><td>1094</td></tr><tr><td>100000</td><td>6110</td><td>6103</td><td>6065</td><td>6259</td><td>5854</td><td>6178</td></tr><tr><td>1000000</td><td>54475</td><td>51890</td><td>52329</td><td>52560</td><td>52099</td><td>52794</td></tr></tbody></table><p>测试结果差异并不大，<code>Javassist</code> 模式下只是稍快了一点点，几乎可以忽略不记。与Duboo作者博客6楼评论的测试结果一致。所以想简单通用性强用反射模式，也可以通过使用 <code>Javassist</code> 模式来学习更多知识，因为 <code>Javassist</code> 需要自己兼容很多特殊的状况，反射调用 JDK 已经帮你兼容完了。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>写到这里我们了解了 RPC 的基本原理、服务注册与发现、客户端代理、网络传输、重点介绍了服务端的两种代理模式，学习 <code>Javassist</code> 如何实现代理。</p><p>还有很多东西没有重点讲述甚至没有提及，例如粘、拆包的处理、自定义数据包协议、<code>Javassist</code> 模式下如何实现方法重载、如何解决一个服务接口类有多个实现、如何解决一个实现类实现了多个服务接口、在 <code>SpringBoot</code> 中如何自动装载、如何开箱即用、怎么实现异步调用、怎么扩展序列化、压缩算法等等...有兴趣的球友可以在源码中寻找答案，或者寻找优化项，当然也可以寻找 bug 。如果球友能理解整个项目的实现，相信你一定会有所收获。</p><h2 id="附录" tabindex="-1"><a class="header-anchor" href="#附录" aria-hidden="true">#</a> 附录</h2>`,112),k={href:"https://github.com/ppphuang/rpc-spring-starter",target:"_blank",rel:"noopener noreferrer"},r={href:"https://github.com/ppphuang/rpc-spring-starter-demo",target:"_blank",rel:"noopener noreferrer"},d={href:"https://mp.weixin.qq.com/s/C9LVfEmo-kQbUnKDt3KuGw",target:"_blank",rel:"noopener noreferrer"};function v(m,b){const a=e("ExternalLinkIcon");return c(),o("div",null,[u,n("p",null,[s("项目地址："),n("a",k,[s("https://github.com/ppphuang/rpc-spring-starter"),p(a)])]),n("p",null,[s("测试DEMO："),n("a",r,[s("https://github.com/ppphuang/rpc-spring-starter-demo"),p(a)])]),n("blockquote",null,[n("p",null,[s("参考链接："),n("a",d,[s("https://mp.weixin.qq.com/s/C9LVfEmo-kQbUnKDt3KuGw"),p(a)]),s("，出处：黎杜，整理：沉默王二")])])])}const f=t(i,[["render",v],["__file","weildngdrpcwmsxlygrpckj.html.vue"]]);export{f as default};
