import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as c,c as u,a as s,d as n,b as a,w as l,e as i}from"./app-1c5b5ce3.js";const r={},k=s("strong",null,"原文：",-1),d={href:"https://www.freecodecamp.org/news/2d-array-in-java-two-dimensional-and-nested-arrays/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.freecodecamp.org/news/author/ihechikara/",target:"_blank",rel:"noopener noreferrer"},b=s("strong",null,"译者：",-1),v={href:"https://chinese.freecodecamp.org/news/java-array-how-to-declare-and-initialize-an-array-in-java-example/",target:"_blank",rel:"noopener noreferrer"},h=i(`<p>在本文中，我们将讨论 Java 中的二维数组。你将看到创建一个数组的语法，以及如何在二维数组中添加和访问项目。</p><h2 id="如何在-java-中声明一个二维数组" tabindex="-1"><a class="header-anchor" href="#如何在-java-中声明一个二维数组" aria-hidden="true">#</a> 如何在 Java 中声明一个二维数组</h2><p>要在 Java 中创建二维数组，你必须指定要存储在数组中的项目的数据类型，后跟两个方括号和数组的名称。</p><p>语法如下所示：</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>data_type[][] array_name;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>让我们看一个代码示例。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> oddNumbers <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你还没有理解上面发生的事情，请不要担心。在下一节中，你将了解有关二维数组如何工作以及如何访问存储在其中的项目的更多信息。</p><h2 id="如何在-java-中访问二维数组中的项目" tabindex="-1"><a class="header-anchor" href="#如何在-java-中访问二维数组中的项目" aria-hidden="true">#</a> 如何在 Java 中访问二维数组中的项目</h2><p>我们可以使用两个方括号来访问二维中的项目。</p><p>第一个表示我们要从中访问项目的数组，而第二个表示我们要访问的项目的索引。</p><p>让我们用一个例子来简化上面的解释：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> oddNumbers <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>oddNumbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，<code>oddNumbers</code> 数组中有两个数组——<code>{1, 3, 5, 7}</code> 和 <code>{9, 11, 13, 15}</code>。</p><p>第一个数组——<code>{1, 3, 5, 7}</code>——用 0 表示。</p><p>第二个数组——<code>{9, 11, 13, 15}</code>——用 1 表示。</p><p>第一个数组是 0，第二个是 1，第三个是 2，依此类推。</p><p>因此，要访问第一个数组中的项目，我们将 0 分配给第一个方括号。由于我们试图访问数组中的第一项，我们将使用它的索引，即 0：<code>oddNumbers[0][0]</code>。</p><p>让我们进一步分解它。</p><p>这是访问项目的代码：<code>oddNumbers[?][?]</code>。</p><p>我在两个方括号中都加上了问号——我们会随着我们的进展填写它们。</p><p>因此，假设我们要访问第二个数组中用 1 表示的项目，我们的代码将如下所示：<code>oddNumbers[1][?]</code>。</p><p>现在我们在第二个数组（<code>{9, 11, 13, 15}</code>）中，让我们尝试访问其中的一个项目。就像常规数组一样，每个项目都有一个从零开始的索引。</p><p>因此，要访问第三项 <code>13</code>，我们将其索引号传递给第二个方括号：<code>oddNumbers[1][2]</code>。</p><p>在下一节中，我们将从一个新示例开始。</p><h2 id="如何在-java-示例中访问二维数组中的项目" tabindex="-1"><a class="header-anchor" href="#如何在-java-示例中访问二维数组中的项目" aria-hidden="true">#</a> 如何在 Java 示例中访问二维数组中的项目</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> oddNumbers <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里的目标是访问第三个数组中的 21。我们的访问代码仍然有问号：<code>oddNumbers[?][?]</code>。</p><p>我们将首先给第一个问号一个指向要访问的特定数组的值。</p><p>数组 0 =&gt; <code>{1, 3, 5, 7}</code></p><p>数组 1 =&gt; <code>{9, 11, 13, 15}</code></p><p>数组 2 =&gt; <code>{17, 19, 21, 23}</code></p><p>我们要查找的数字在第三个数组中，数组索引为 2。所以我们找到了第一个方括号的值：<code>oddNumbers[2][?]</code>。</p><p>第二个方括号的值将指向要访问的实际项目。为此，我们必须指定项目的索引号。以下是该数组中的索引：</p><p>17 =&gt; 索引 0</p><p>19 =&gt; 索引 1</p><p>21 =&gt; 索引 2</p><p>23 =&gt; 索引 3</p><p>21 的索引为 2，因此我们可以继续将其添加到第二个方括号：<code>oddNumbers[2][2]</code>。当你将其打印到控制台时，你将打印出 21。</p><p>代码如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> oddNumbers <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>oddNumbers<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 21</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以使用嵌套循环遍历二维数组中的所有项目。这是一个例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> oddNumbers <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> oddNumbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oddNumbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>oddNumbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>   
<span class="token punctuation">}</span>

<span class="token comment">// 1</span>
<span class="token comment">// 3</span>
<span class="token comment">// 5</span>
<span class="token comment">// 7</span>
<span class="token comment">// 9</span>
<span class="token comment">// 11</span>
<span class="token comment">// 13</span>
<span class="token comment">// 15</span>
<span class="token comment">// 17</span>
<span class="token comment">// 19</span>
<span class="token comment">// 21</span>
<span class="token comment">// 23</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码打印出 <code>oddNumbers</code> 数组中的所有项目。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> <strong>小结</strong></h2><p>在本文中，我们讨论了 Java 中的二维数组。</p><p>我们看到了创建二维数组的语法，还看到了展示如何访问存储在其中的项目的示例。</p><p>最后，我们看到了如何循环并打印二维数组中的项目。</p><p>祝你编程愉快！</p>`,49),g={href:"https://www.freecodecamp.org/chinese/news/2d-array-in-java-two-dimensional-and-nested-arrays/",target:"_blank",rel:"noopener noreferrer"};function _(w,j){const p=t("ExternalLinkIcon"),e=t("RouterLink");return c(),u("div",null,[s("p",null,[k,n(),s("a",d,[n("2D Array in Java – Two-Dimensional and Nested Arrays"),a(p)]),n("，作者："),s("a",m,[n("Ihechikara Vincent Abba"),a(p)])]),s("p",null,[b,n(),a(e,{to:"/chinese/news/author/miyaliu/"},{default:l(()=>[n("Miya Liu")]),_:1})]),s("p",null,[n("多维数组只是数组的"),s("a",v,[n("数组"),a(p)]),n("。你可以将其视为存储多个容器的单个容器。")]),h,s("blockquote",null,[s("p",null,[n("参考链接："),s("a",g,[n("https://www.freecodecamp.org/chinese/news/2d-array-in-java-two-dimensional-and-nested-arrays/"),a(p)]),n("，整理：沉默王二")])])])}const N=o(r,[["render",_],["__file","javazdewszhqtsz.html.vue"]]);export{N as default};
