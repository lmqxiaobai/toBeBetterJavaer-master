import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o as a,c as i,a as t,d as e,b as g,e as s}from"./app-1c5b5ce3.js";const c={},p=s(`<p><strong>UDP 比 TCP 快吗？</strong></p><p>相信就算不是八股文老手，也会下意识的脱口而出：&quot;<strong>是</strong>&quot;。</p><p>要追问为什么，估计大家也能说出个大概。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-udpjydbtcpkm-b20a3dca-e8f6-4f9c-b008-f1939a7bccbc.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>但这也让人好奇，<strong>用 UDP 就一定比用 TCP 快吗？什么情况下用 UDP 会比用 TCP 慢？</strong></p><p>今天就来和球友们聊下这个话题。</p><h2 id="一、使用-socket-进行数据传输" tabindex="-1"><a class="header-anchor" href="#一、使用-socket-进行数据传输" aria-hidden="true">#</a> 一、使用 socket 进行数据传输</h2><p>作为一个程序员，假设我们需要在 A 电脑的进程发一段数据到 B 电脑的进程，我们一般会在代码里使用 socket 进行编程。</p><p>socket 就像是一个<strong>电话或者邮箱</strong>（邮政的信箱）。当你想要发送消息的时候，拨通电话或者将信息塞到邮箱里，socket 内核会自动完成将数据传给对方的这个过程。</p><p>基于 socket 我们可以选择使用 TCP 或 UDP 协议进行通信。</p><p>对于 TCP 这样的可靠性协议，每次消息发出后都能明确知道对方收没收到，就<strong>像打电话一样</strong>，只要&quot;喂喂&quot;两下就能知道对方有没有在听。</p><p>而 UDP 就像是<strong>给邮政的信箱寄信一样</strong>，你寄出去的信，根本就不知道对方有没有正常收到，丢了也是有可能的。</p><blockquote><p>这让我想起了大概 17 年前，当时还没有现在这么发达的网购，想买一本《掌机迷》杂志，还得往信封里塞钱，然后一等就是一个月，好几次都怀疑信是不是丢了。我至今印象深刻，因为那是我和我哥攒了好久的钱。。。</p></blockquote><p>回到 socket 编程的话题上。</p><p>创建 socket 的方式就像下面这样。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>fd = socket(AF_INET, 具体协议,0);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意上面的&quot;<strong>具体协议</strong>&quot;，如果传入的是<code>SOCK_STREAM</code>，是指使用<strong>字节流</strong>传输数据，说白了就是<strong>TCP 协议</strong>。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-udpjydbtcpkm-528c468a-63e4-4680-a7ce-e63210c55174.jpg" alt="TCP 是什么" tabindex="0" loading="lazy"><figcaption>TCP 是什么</figcaption></figure><p>如果传入的是<code>SOCK_DGRAM</code>，是指使用<strong>数据报</strong>传输数据，也就是<strong>UDP 协议</strong>。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-udpjydbtcpkm-fc9eee64-dd0a-44f8-b6b2-0eab4c418df2.jpg" alt="UDP 是什么" tabindex="0" loading="lazy"><figcaption>UDP 是什么</figcaption></figure><p>返回的<code>fd</code>是指 socket 句柄，可以理解为 socket 的<strong>身份证号</strong>。通过这个<code>fd</code>你可以在内核中找到<strong>唯一</strong>的 socket 结构。</p><p>如果想要通过这个 socket 发消息，只需要操作这个 fd 就行了，比如执行 <code>send(fd, msg, ...)</code>，内核就会通过这个 fd 句柄找到 socket 然后进行发数据的操作。</p><p><strong>如果一切顺利</strong>，此时对方执行接收消息的操作，也就是 <code>recv(fd, msg, ...)</code>，就能拿到你发的消息。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-udpjydbtcpkm-c29c8907-5890-424f-8461-c812d5c92fc1.jpg" alt="udp 发送接收过程" tabindex="0" loading="lazy"><figcaption>udp 发送接收过程</figcaption></figure><h2 id="二、对于异常情况的处理" tabindex="-1"><a class="header-anchor" href="#二、对于异常情况的处理" aria-hidden="true">#</a> 二、对于异常情况的处理</h2><p><strong>但如果不顺利呢？</strong></p><p>比如消息发到一半，丢包了呢?</p><blockquote><p>丢包的原因有很多，这里先不展开。</p></blockquote><p>那 UDP 和 TCP 的态度就不太一样了。</p><p>UDP 表示，&quot;哦，是吗？然后呢？关我 x 事&quot;</p><p>TCP 态度就截然相反了，&quot;啊？那可不行，是不是我发太快了呢？是不是链路太堵被别人影响到了呢？不过你放心，我肯定给你补发&quot;</p><p>TCP 老实人石锤了。我们来看下这个老实人在背后都默默做了哪些事情。</p><h3 id="重传机制" tabindex="-1"><a class="header-anchor" href="#重传机制" aria-hidden="true">#</a> 重传机制</h3><p>对于 TCP，它会给发出的消息打上一个<strong>编号（sequence）</strong>，接收方收到后回一个<strong>确认(ack)</strong>。发送方可以通过<code>ack</code>的数值知道接收方收到了哪些<code>sequence</code>的包。</p><p>如果长时间等不到对方的确认，TCP 就会重新发一次消息，这就是所谓的<strong>重传机制</strong>。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-udpjydbtcpkm-a2c82ddf-4fb8-40d4-8b8a-0650b925d251.jpg" alt="TCP 重传" tabindex="0" loading="lazy"><figcaption>TCP 重传</figcaption></figure><h3 id="流量控制机制" tabindex="-1"><a class="header-anchor" href="#流量控制机制" aria-hidden="true">#</a> 流量控制机制</h3><p>但重传这件事本身对性能影响是比较严重的，所以是<strong>下下策</strong>。</p><p>于是 TCP 就需要思考有没有办法可以尽量<strong>避免重传</strong>。</p><p>因为数据发送方和接收方处理数据能力可能不同，因此如果可以根据双方的能力去调整发送的数据量就好了，于是就有了<strong>发送和接收窗口</strong>，基本上从名字就能看出它的作用，比如<strong>接收窗口的大小</strong>就是指，接收方当前<strong>能接收的数据量大小</strong>，<strong>发送窗口的大小</strong>就指发送方当前能发的数据量大小。TCP 根据窗口的大小去控制自己发送的数据量，这样就能大大减少丢包的概率。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-udpjydbtcpkm-9130e2e1-2005-4943-8a35-6cf9d0ac2f2c.jpg" alt="流量控制机制" tabindex="0" loading="lazy"><figcaption>流量控制机制</figcaption></figure><h3 id="滑动窗口机制" tabindex="-1"><a class="header-anchor" href="#滑动窗口机制" aria-hidden="true">#</a> 滑动窗口机制</h3><p>接收方接收到数据之后，会不断处理，<strong>处理能力也不是一成不变的</strong>，有时候处理的快些，那就可以收多点数据，处理的慢点那就希望对方能少发点数据。毕竟发多了就有可能处理不过来导致丢包，丢包会导致重传，这可是下下策。因此我们需要动态的去调节这个接收窗口的大小，于是就有了<strong>滑动窗口机制</strong>。</p><p>看到这里大家可能就有点迷了，<strong>流量控制和滑动窗口机制貌似很像，它们之间是啥关系？<strong>我总结一下。其实现在 TCP 是</strong>通过滑动窗口机制来实现流量控制机制的</strong>。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-udpjydbtcpkm-d2dc9fd5-ca0b-4a59-99ef-520dccd0c80f.jpg" alt="滑动窗口机制" tabindex="0" loading="lazy"><figcaption>滑动窗口机制</figcaption></figure><h3 id="拥塞控制机制" tabindex="-1"><a class="header-anchor" href="#拥塞控制机制" aria-hidden="true">#</a> 拥塞控制机制</h3><p>但这还不够，有时候发生丢包，<strong>并不是因为发送方和接收方的处理能力问题导致的</strong>。而是跟<strong>网络环境</strong>有关，大家可以将网络想象为一条公路。马路上可能堵满了别人家的车，只留下一辆车的空间。那就算你家有 5 辆车，目的地也正好有 5 个停车位，你也没办法同时全部一起上路。于是 TCP 希望能感知到外部的网络环境，根据网络环境及时调整自己的发包数量，比如马路只够两辆车跑，那我就只发两辆车。但外部环境这么复杂，TCP 是怎么感知到的呢？</p><p>TCP 会先慢慢试探的发数据，不断加码数据量，越发越多，先发一个，再发 2 个，4 个…。直到出现丢包，这样 TCP 就知道现在当前网络大概吃得消几个包了，这既是所谓的<strong>拥塞控制机制</strong>。</p><p>不少人会疑惑流量控制和拥塞控制的关系。我这里小小的总结下。<strong>流量控制</strong>针对的是<strong>单个连接</strong>数据处理能力的控制，<strong>拥塞控制</strong>针对的是<strong>整个网络环境</strong>数据处理能力的控制。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-udpjydbtcpkm-caea3945-36df-4766-9190-3d57b5d84eaf.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="分段机制" tabindex="-1"><a class="header-anchor" href="#分段机制" aria-hidden="true">#</a> 分段机制</h3><p>但上面提到的都是怎么<strong>降低</strong>重传的概率，似乎重传这个事情就是无法避免的，<strong>那如果确实发生了，有没有办法降低它带来的影响呢？</strong></p><p>有。当我们需要发送一个超大的数据包时，如果这个数据包丢了，那就得重传同样大的数据包。但如果我能将其分成一小段一小段，那就算真丢了，那我也就只需要重传那一小段就好了，大大减小了重传的压力，这就是 TCP 的<strong>分段机制</strong>。</p><p>而这个所谓的一小段的长度，在传输层叫<strong>MSS</strong>（<strong>Maximum Segment Size</strong>），数据包长度大于 MSS 则会分成 N 个小于等于 MSS 的包。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-udpjydbtcpkm-f3b10e02-3fc3-4d6b-a264-5fbd09ecc3ef.jpg" alt="MSS 分包" tabindex="0" loading="lazy"><figcaption>MSS 分包</figcaption></figure><p>而在网络层，如果数据包还大于<strong>MTU（Maximum Transmit Unit）</strong>，那还会继续分包。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-udpjydbtcpkm-077bc3b6-3dc0-43a7-af50-71342f2163e0.jpg" alt="MTU 分包" tabindex="0" loading="lazy"><figcaption>MTU 分包</figcaption></figure><p>一般情况下，<code>MSS=MTU-40Byte</code>，所以<strong>TCP 分段后，到了 IP 层大概率就不会再分片了</strong>。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-udpjydbtcpkm-95d1b217-4c06-4447-a324-6ac9ac56f815.jpg" alt="MSS 和 MTU 的区别" tabindex="0" loading="lazy"><figcaption>MSS 和 MTU 的区别</figcaption></figure><h3 id="乱序重排机制" tabindex="-1"><a class="header-anchor" href="#乱序重排机制" aria-hidden="true">#</a> 乱序重排机制</h3><p>既然数据包会被分段，链路又这么复杂还会丢包，那数据包乱序也就显得不奇怪了。比如发数据包 1,2,3。1 号数据包走了其他网络路径，2 和 3 数据包先到，1 数据包后到，于是数据包顺序就成了 2,3,1。这一点 TCP 也考虑到了，依靠数据包的<code>sequence</code>，接收方就能知道数据包的先后顺序。</p><p>后发的数据包先到是吧，那就先放到专门的<strong>乱序队列</strong>中，等数据都到齐后，重新整理好乱序队列的数据包顺序后再给到用户，这就是<strong>乱序重排机制</strong>。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-udpjydbtcpkm-9dd70650-8eae-43a2-a3e1-dcd7404df0b6.jpg" alt="乱序队列等待数据包的到来" tabindex="0" loading="lazy"><figcaption>乱序队列等待数据包的到来</figcaption></figure><h3 id="连接机制" tabindex="-1"><a class="header-anchor" href="#连接机制" aria-hidden="true">#</a> 连接机制</h3><p>前面提到，UDP 是无连接的，而 TCP 是面向连接的。</p><p>这里提到的<strong>连接</strong>到底是啥？</p><p>TCP 通过上面提到的各种机制实现了数据的可靠性。这些机制背后是通过一个个数据结构来实现的逻辑。而为了实现这套逻辑，操作系统内核需要在两端代码里维护一套复杂的状态机（三次握手，四次挥手，RST，closing 等异常处理机制），<strong>这套状态机其实就是所谓的&quot;连接&quot;</strong>。这其实就是 TCP 的<strong>连接机制</strong>，而 UDP 用不上这套状态机，因此它是&quot;无连接&quot;的。</p><p>网络环境链路很长，还复杂，数据丢包是很常见的。</p><p>我们平常用 TCP 做各种数据传输，完全对这些事情无感知。</p><p><strong>哪有什么岁月静好，是 TCP 替你负重前行。</strong></p><p>这就是 TCP 三大特性&quot;面向连接、可靠的、基于字节流&quot;中&quot;<strong>可靠</strong>&quot;的含义。</p><p>不信你改用 UDP 试试，丢包那就是真丢了，丢到你怀疑人生。</p><h2 id="三、用-udp-就一定比用-tcp-快吗" tabindex="-1"><a class="header-anchor" href="#三、用-udp-就一定比用-tcp-快吗" aria-hidden="true">#</a> 三、用 UDP 就一定比用 TCP 快吗？</h2><p>这时候 UDP 就不服了：&quot;<strong>正因为没有这些复杂的 TCP 可靠性机制，所以我很快啊</strong>&quot;</p><p>嗯，这也是大部分人认为 UDP 比 TCP 快的原因。</p><p><strong>实际上大部分情况下也确实是这样的。这话没毛病。</strong></p><p>那问题就来了。</p><p><strong>有没有用了 UDP 但却比 TCP 慢的情况呢？</strong></p><p>其实也有。</p><p>在回答这个问题前，我需要先说下<strong>UDP 的用途</strong>。</p><p>实际上，<strong>大部分</strong>人也不会尝试<strong>直接拿裸 udp</strong>放到生产环境中去做项目。</p><p>那 UDP 的价值在哪？</p><p>在我看来，UDP 的存在，本质是内核提供的一个<strong>最小网络传输功能</strong>。</p><p>很多时候，大家虽然号称自己用了 UDP，但实际上都很<strong>忌惮</strong>它的丢包问题，所以大部分情况下都会在 UDP 的基础上做各种不同程度的<strong>应用层</strong>可靠性保证。比如王者农药用的<code>KCP</code>，以及最近很火的<code>QUIC（HTTP3.0）</code>，其实都<strong>在 UDP 的基础上做了重传逻辑</strong>，实现了一套<strong>类似</strong>TCP 那样的可靠性机制。</p><p>教科书上最爱提 UDP 适合用于<strong>音视频传输</strong>，因为这些场景允许丢包。但其实也不是什么包都能丢的，比如重要的关键帧啥的，该重传还得重传。除此之外，还有一些<strong>乱序处理机制</strong>。举个例子吧。</p><p>打音视频电话的时候，你可能遇到过丢失中间某部分信息的情况，但应该从来没遇到过乱序的情况吧。</p><p>比如对方打网络电话给你，说了：&quot;<strong>我好想给二哥来个点赞！</strong>&quot;</p><p>这时候网络信号不好，你可能会听到&quot;我….点赞&quot;。</p><p>但却从来没遇到过&quot;二哥好想赞&quot;这样的<strong>乱序</strong>场景吧？</p><p>所以说，<strong>虽然选择了使用 UDP，但一般还是会在应用层上做一些重传机制的</strong>。</p><p>于是问题就来了，<strong>如果现在我需要传一个特别大的数据包</strong>。</p><p>在<code>TCP</code>里，它内部会根据<code>MSS</code>的大小<strong>分段</strong>，这时候进入到 IP 层之后，每个包大小都不会超过<code>MTU</code>，因此 IP 层一般不会再进行分片。这时候发生丢包了，只需要<strong>重传每个 MSS 分段</strong>就够了。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-udpjydbtcpkm-5ba64a40-80ff-4b18-9105-e0492db5eb08.jpg" alt="TCP 分段" tabindex="0" loading="lazy"><figcaption>TCP 分段</figcaption></figure><p>但对于<code>UDP</code>，其本身并不会分段，如果数据过大，到了 IP 层，就会进行分片。此时发生丢包的话，再次重传，就会<strong>重传整个大数据包</strong>。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-udpjydbtcpkm-a9b8400d-47f0-4b9d-b3e8-8a89c81f042b.jpg" alt="UDP 不分段" tabindex="0" loading="lazy"><figcaption>UDP 不分段</figcaption></figure><p>对于上面这种情况，<strong>使用 UDP 就比 TCP 要慢</strong>。</p><p>当然，解决起来也不复杂。这里的关键点在于是否实现了数据分段机制，<strong>使用 UDP 的应用层如果也实现了分段机制的话，那就不会出现上述的问题了</strong>。</p><h2 id="四、总结" tabindex="-1"><a class="header-anchor" href="#四、总结" aria-hidden="true">#</a> 四、总结</h2><ul><li>TCP 为了实现可靠性，引入了重传机制、流量控制、滑动窗口、拥塞控制、分段以及乱序重排机制。而 UDP 则没有实现，因此一般来说 TCP 比 UDP 慢。</li><li>TCP 是面向连接的协议，而 UDP 是无连接的协议。这里的&quot;<strong>连接</strong>&quot;其实是，操作系统内核在两端代码里维护的一套复杂状态机。</li><li>大部分项目，会在基于 UDP 的基础上，模仿 TCP，实现不同程度的可靠性机制。比如王者农药用的 KCP 其实就在基于 UDP 在应用层里实现了一套<strong>重传</strong>机制。</li><li>对于 UDP+重传的场景，如果要传<strong>超大数据包</strong>，并且没有实现<strong>分段机制</strong>的话，那数据就会在 IP 层分片，一旦丢包，那就需要重传整个超大数据包。而 TCP 则不需要考虑这个，内部会自动分段，丢包重传分段就行了。这种场景下，其实 TCP 更快。</li></ul>`,99),d={href:"https://mp.weixin.qq.com/s/TLHPQHztyCtPwzKsl5aI6g",target:"_blank",rel:"noopener noreferrer"};function b(u,f){const o=n("ExternalLinkIcon");return a(),i("div",null,[p,t("blockquote",null,[t("p",null,[e("参考链接："),t("a",d,[e("https://mp.weixin.qq.com/s/TLHPQHztyCtPwzKsl5aI6g"),g(o)]),e("，作者，小白 debug")])])])}const h=r(c,[["render",b],["__file","udpjydbtcpkm.html.vue"]]);export{h as default};
