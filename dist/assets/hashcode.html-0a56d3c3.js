import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,d as s,b as e,e as t}from"./app-1c5b5ce3.js";const i={},u=t(`<h1 id="_13-5-java-hashcode方法解析" tabindex="-1"><a class="header-anchor" href="#_13-5-java-hashcode方法解析" aria-hidden="true">#</a> 13.5 Java hashCode方法解析</h1><p>今天我们来谈谈 Java 中的 <code>hashCode()</code> 方法。众所周知，Java 是一门面向对象的编程语言，所有的类都会默认继承自 Object 类，而 Object 的中文意思就是“对象”。</p><p>Object 类中就包含了 <code>hashCode()</code> 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),r=n("code",null,"hashCode()",-1),d=n("code",null,"hashCode()",-1),k={href:"https://javabetter.cn/oo/native-method.html",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"native",-1),h=n("code",null,"C/C++",-1),m=n("code",null,"jdk/src/hotspot/share/runtime/synchronizer.cpp",-1),b={href:"https://github.com/openjdk/jdk/blob/master/src/hotspot/share/runtime/synchronizer.cpp",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"get_next_hash()",-1),_=n("figure",null,[n("img",{src:"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/basic-extra-meal/hashcode-1.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),y=n("p",null,[s("Java 9 之后，"),n("code",null,"hashCode()"),s(" 方法会被 "),n("code",null,"@HotSpotIntrinsicCandidate"),s(" 注解修饰，表明它在 HotSpot 虚拟机中有一套高效的实现，基于 CPU 指令。")],-1),w=n("p",null,[s("那大家有没有想过这样一个问题："),n("strong",null,[s("为什么 Object 类需要一个 "),n("code",null,"hashCode()"),s(" 方法呢")]),s("？")],-1),f=n("code",null,"hashCode()",-1),C={href:"https://javabetter.cn/collection/hashmap.html",target:"_blank",rel:"noopener noreferrer"},j=n("p",null,"哈希表（Hash Table），也叫散列表，是一种可以通过关键码值（key-value）直接访问的数据结构，它最大的特点就是可以快速实现查找、插入和删除。其中用到的算法叫做哈希，就是把任意长度的输入，变换成固定长度的输出，该输出就是哈希值。像 MD5、SHA1 都用的是哈希算法。",-1),S={href:"https://javabetter.cn/collection/hashmap.html",target:"_blank",rel:"noopener noreferrer"},q=t(`<p>大家想一下，如果没有哈希表，但又需要这样一个数据结构，它里面存放的数据是不允许重复的，该怎么办呢？</p><p>要不使用 <code>equals()</code> 方法进行逐个比较？这种方案当然是可行的。但如果数据量特别特别大，采用 <code>equals()</code> 方法进行逐个对比的效率肯定很低很低，最好的解决方案就是哈希表。</p><p>拿 HashMap 来说吧。当我们要在它里面添加对象时，先调用这个对象的 <code>hashCode()</code> 方法，得到对应的哈希值，然后将哈希值和对象一起放到 HashMap 中。当我们要再添加一个新的对象时：</p><ul><li>获取对象的哈希值；</li><li>和之前已经存在的哈希值进行比较，如果不相等，直接存进去；</li><li>如果有相等的，再调用 <code>equals()</code> 方法进行对象之间的比较，如果相等，不存了；</li><li>如果不等，说明哈希冲突了，增加一个链表，存放新的对象；</li><li>如果链表的长度大于 8，转为红黑树来处理。</li></ul><p>就这么一套下来，调用 <code>equals()</code> 方法的频率就大大降低了。也就是说，只要哈希算法足够的高效，把发生哈希冲突的频率降到最低，哈希表的效率就特别的高。</p><p>来看一下 HashMap 的哈希算法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> h<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先调用对象的 <code>hashCode()</code> 方法，然后对该值进行右移运算，然后再进行异或运算。</p><p>通常来说，String 会用来作为 HashMap 的键进行哈希运算，因此我们再来看一下 String 的 <code>hashCode()</code> 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> h <span class="token operator">=</span> hash<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> val<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            h <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> h <span class="token operator">+</span> val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        hash <span class="token operator">=</span> h<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> h<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可想而知，经过这么一系列复杂的运算，再加上 JDK 作者这种大师级别的设计，哈希冲突的概率我相信已经降到了最低（我们在 HashMap 中深入探讨过）。</p><p>当然了，从理论上来说，对于两个不同对象，它们通过 <code>hashCode()</code> 方法计算后的值可能相同。因此，不能使用 <code>hashCode()</code> 方法来判断两个对象是否相等，必须得通过 <code>equals()</code> 方法。</p><p>也就是说：</p><ul><li>如果两个对象调用 <code>equals()</code> 方法得到的结果为 true，调用 <code>hashCode()</code> 方法得到的结果必定相等；</li><li>如果两个对象调用 <code>hashCode()</code> 方法得到的结果不相等，调用 <code>equals()</code> 方法得到的结果必定为 false；</li></ul><p>反之：</p><ul><li>如果两个对象调用 <code>equals()</code> 方法得到的结果为 false，调用 <code>hashCode()</code> 方法得到的结果不一定不相等；</li><li>如果两个对象调用 <code>hashCode()</code> 方法得到的结果相等，调用 <code>equals()</code> 方法得到的结果不一定为 true；</li></ul><p>来看下面这段代码。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Student</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> scores <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scores<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>scores<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

     <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
     <span class="token punctuation">}</span>

     <span class="token annotation punctuation">@Override</span>
     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>
         <span class="token keyword">return</span> age <span class="token operator">==</span> student<span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span>
                 <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> student<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们重写了 Student 类的 <code>equals()</code> 方法，如果两个学生的年纪和姓名相同，我们就认为是同一个学生，虽然很离谱，但我们就是这么草率。</p><p>在 <code>main()</code> 方法中，18 岁的张三考试得了 98 分，很不错的成绩，我们把张三和成绩放到了 HashMap 中，然后准备输出张三的成绩：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>null
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>很不巧，结果为 null，而不是预期当中的 98。这是为什么呢？</p><p>原因就在于重写 <code>equals()</code> 方法的时候没有重写 <code>hashCode()</code> 方法。默认情况下，<code>hashCode()</code> 方法是一个本地方法，会返回对象的存储地址，显然 <code>put()</code> 中的 s1 和 <code>get()</code> 中的 <code>new Student(18, &quot;张三&quot;)</code> 是两个对象，它们的存储地址肯定是不同的。</p><p>HashMap 的 <code>get()</code> 方法会调用 <code>hash(key.hashCode())</code> 计算对象的哈希值，虽然两个不同的 <code>hashCode()</code> 结果经过 <code>hash()</code> 方法计算后有可能得到相同的结果，但这种概率微乎其微，所以就导致 <code>scores.get(new Student(18, &quot;张三&quot;))</code> 无法得到预期的值 18。</p><p>怎么解决这个问题呢？很简单，重写 <code>hashCode()</code> 方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token annotation punctuation">@Override</span>
 <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),x={href:"https://javabetter.cn/common-tool/Objects.html",target:"_blank",rel:"noopener noreferrer"},M=n("code",null,"hash()",-1),H=n("code",null,"hashCode()",-1),O=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token class-name">Object</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

 <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

 <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> element <span class="token operator">:</span> a<span class="token punctuation">)</span>
     result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token punctuation">(</span>element <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> element<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码似乎很简单，归纳出的数学公式如下所示（n 为字符串长度）。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/basic-extra-meal/hashcode-2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>注意：31 是个奇质数，不大不小，一般质数都非常适合哈希计算，偶数相当于移位运算，容易溢出，造成数据信息丢失。</p><p>这就意味着年纪和姓名相同的情况下，会得到相同的哈希值。<code>scores.get(new Student(18, &quot;张三&quot;))</code> 就会返回 98 的预期值了。</p><p>《Java 编程思想》这本圣经中有一段话，对 <code>hashCode()</code> 方法进行了一段描述。</p><blockquote><p>设计 <code>hashCode()</code> 时最重要的因素就是：无论何时，对同一个对象调用 <code>hashCode()</code> 都应该生成同样的值。如果在将一个对象用 <code>put()</code> 方法添加进 HashMap 时产生一个 <code>hashCode()</code> 值，而用 <code>get()</code> 方法取出时却产生了另外一个 <code>hashCode()</code> 值，那么就无法重新取得该对象了。所以，如果你的 <code>hashCode()</code> 方法依赖于对象中易变的数据，用户就要当心了，因为此数据发生变化时，<code>hashCode()</code> 就会生成一个不同的哈希值，相当于产生了一个不同的键。</p></blockquote><p>也就是说，如果在重写 <code>hashCode()</code> 和 <code>equals()</code> 方法时，对象中某个字段容易发生改变，那么最好舍弃这些字段，以免产生不可预期的结果。</p><p>好。有了上面这些内容作为基础后，我们回头再来看看本地方法 <code>hashCode()</code> 的 C++ 源码。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> intptr_t <span class="token function">get_next_hash</span><span class="token punctuation">(</span>Thread<span class="token operator">*</span> current<span class="token punctuation">,</span> oop obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  intptr_t value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>hashCode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这种形式使用全局的 Park-Miller 随机数生成器。</span>
    <span class="token comment">// 在 MP 系统上，我们将对全局变量进行大量的读写访问，因此该机制会引发大量的一致性通信。</span>
    value <span class="token operator">=</span> os<span class="token double-colon punctuation">::</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hashCode <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这种变体在 STW（Stop The World）操作之间具有稳定（幂等）的特性。</span>
    <span class="token comment">// 在一些 1-0 同步方案中，这可能很有用。</span>
    intptr_t addr_bits <span class="token operator">=</span> <span class="token generic-function"><span class="token function">cast_from_oop</span><span class="token generic class-name"><span class="token operator">&lt;</span>intptr_t<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">3</span><span class="token punctuation">;</span>
    value <span class="token operator">=</span> addr_bits <span class="token operator">^</span> <span class="token punctuation">(</span>addr_bits <span class="token operator">&gt;&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">^</span> GVars<span class="token punctuation">.</span>stw_random<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hashCode <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment">// 用于敏感性测试</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hashCode <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    value <span class="token operator">=</span> <span class="token operator">++</span>GVars<span class="token punctuation">.</span>hc_sequence<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hashCode <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    value <span class="token operator">=</span> <span class="token generic-function"><span class="token function">cast_from_oop</span><span class="token generic class-name"><span class="token operator">&lt;</span>intptr_t<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// Marsaglia 的异或移位方案，具有线程特定的状态</span>
    <span class="token comment">// 这可能是最好的整体实现 -- 我们可能会在未来的版本中将其设为默认实现。</span>
    <span class="token keyword">unsigned</span> t <span class="token operator">=</span> current<span class="token operator">-&gt;</span>_hashStateX<span class="token punctuation">;</span>
    t <span class="token operator">^=</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;&lt;</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    current<span class="token operator">-&gt;</span>_hashStateX <span class="token operator">=</span> current<span class="token operator">-&gt;</span>_hashStateY<span class="token punctuation">;</span>
    current<span class="token operator">-&gt;</span>_hashStateY <span class="token operator">=</span> current<span class="token operator">-&gt;</span>_hashStateZ<span class="token punctuation">;</span>
    current<span class="token operator">-&gt;</span>_hashStateZ <span class="token operator">=</span> current<span class="token operator">-&gt;</span>_hashStateW<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> v <span class="token operator">=</span> current<span class="token operator">-&gt;</span>_hashStateW<span class="token punctuation">;</span>
    v <span class="token operator">=</span> <span class="token punctuation">(</span>v <span class="token operator">^</span> <span class="token punctuation">(</span>v <span class="token operator">&gt;&gt;</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>t <span class="token operator">^</span> <span class="token punctuation">(</span>t <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    current<span class="token operator">-&gt;</span>_hashStateW <span class="token operator">=</span> v<span class="token punctuation">;</span>
    value <span class="token operator">=</span> v<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  value <span class="token operator">&amp;=</span> markWord<span class="token double-colon punctuation">::</span>hash_mask<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> value <span class="token operator">=</span> <span class="token number">0xBAD</span><span class="token punctuation">;</span>
  <span class="token function">assert</span><span class="token punctuation">(</span>value <span class="token operator">!=</span> markWord<span class="token double-colon punctuation">::</span>no_hash<span class="token punctuation">,</span> <span class="token string">&quot;invariant&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有 C++ 基础的话，不用细致去看每一行代码，我们只通过表面去了解一下 <code>get_next_hash()</code> 这个方法就行。其中的 <code>hashCode</code> 变量是 JVM 启动时的一个全局参数，可以通过它来切换哈希值的生成策略。</p><ul><li><code>hashCode==0</code>，调用操作系统 OS 的 <code>random()</code> 方法返回随机数。</li><li><code>hashCode == 1</code>，在 STW（stop-the-world）操作中，这种策略通常用于同步方案中。利用对象地址进行计算，使用不经常更新的随机数（<code>GVars.stw_random</code>）参与其中。</li><li><code>hashCode == 2</code>，使用返回 1，用于某些情况下的测试。</li><li><code>hashCode == 3</code>，从 0 开始计算哈希值，不是线程安全的，多个线程可能会得到相同的哈希值。</li><li><code>hashCode == 4</code>，与创建对象的内存位置有关，原样输出。</li><li><code>hashCode == 5</code>，默认值，支持多线程，使用了 Marsaglia 的 xor-shift 算法产生伪随机数。所谓的 xor-shift 算法，简单来说，看起来就是一个移位寄存器，每次移入的位由寄存器中若干位取异或生成。所谓的伪随机数，不是完全随机的，但是真随机生成比较困难，所以只要能通过一定的随机数统计检测，就可以当作真随机数来使用。</li></ul><p>这里简单总结下。</p><p>在 Java 中，<code>hashCode()</code>方法是定义在 <code>java.lang.Object</code> 类中的一个方法，该类是所有 Java 所有类的父类。因此，每个 Java 对象都可以调用 <code>hashCode()</code>方法。<code>hashCode()</code>方法主要用于支持哈希表（如 java.util.HashMap），这些数据结构使用哈希算法能实现快速查找、插入和删除操作。</p>`,14),J=n("code",null,"hashCode()",-1),V={href:"https://javabetter.cn/string/equals.html",target:"_blank",rel:"noopener noreferrer"},W=n("code",null,"equals()",-1),T=n("p",null,[s("当你创建一个自定义类并覆盖 "),n("code",null,"equals()"),s("方法时，通常也需要覆盖 "),n("code",null,"hashCode()"),s("方法，以确保相等的对象具有相同的哈希码。这有助于提高哈希表在使用自定义类的对象作为键时的准确性。")],-1),z=n("hr",null,null,-1),D=n("strong",null,"数据库、计算机网络、算法与数据结构、设计模式、框架类 Spring、Netty、微服务（Dubbo，消息队列） 网关",-1),N={href:"https://javabetter.cn/pdf/programmer-111.html",target:"_blank",rel:"noopener noreferrer"},B=n("p",null,[s("微信搜 "),n("strong",null,"沉默王二"),s(" 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 "),n("strong",null,"222"),s(" 即可免费领取。")],-1),G=n("figure",null,[n("img",{src:"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function I(P,E){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("意味着所有的类都会有一个 "),r,s(" 方法，该方法会返回一个 int 类型的值。由于 "),d,s(" 方法是一个"),n("a",k,[s("本地方法"),e(a)]),s("（"),v,s(" 关键字修饰的方法，用 "),h,s(" 语言实现，由 Java 调用），意味着 Object 类中并没有给出具体的实现。")]),n("p",null,[s("具体的实现可以参考 "),m,s("（源码可以到 "),n("a",b,[s("GitHub 上 OpenJDK 的仓库中下载"),e(a)]),s("）。"),g,s(" 方法会根据 hashCode 的取值来决定采用哪一种哈希值的生成策略。")]),_,y,w,n("p",null,[s("在 Java 中，"),f,s(" 方法的主要作用就是为了配合"),n("a",C,[s("哈希表"),e(a)]),s("使用的。")]),j,n("p",null,[s("像 Java 中的 HashSet、Hashtable（注意是小写的 t）、HashMap 都是基于哈希表的具体实现。其中的 "),n("a",S,[s("HashMap"),e(a)]),s(" 就是最典型的代表，不仅面试官经常问，工作中的使用频率也非常的高。")]),q,n("p",null,[n("a",x,[s("Objects 类"),e(a)]),s("的 "),M,s(" 方法可以针对不同数量的参数生成新的 "),H,s(" 值。")]),O,n("p",null,[J,s("方法的主要目的是返回一个整数，这个整数称为哈希码，它代表了对象在内存中的一种近似表示。哈希码用于将对象映射到哈希表中的一个特定的位置。两个相等的对象（根据 "),n("a",V,[W,s("方法比较"),e(a)]),s("）应该具有相同的哈希码。然而，具有相同哈希码的两个对象并不一定相等。")]),T,z,n("p",null,[s("最近整理了一份牛逼的学习资料，包括但不限于 Java 基础部分（JVM、Java 集合框架、多线程），还囊括了 "),D,s(" 等等等等……详情戳："),n("a",N,[s("可以说是 2022 年全网最全的学习和找工作的 PDF 资源了"),e(a)])]),B,G])}const L=p(i,[["render",I],["__file","hashcode.html.vue"]]);export{L as default};
