import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as c,c as n,a as e,d,b as r,e as t}from"./app-1c5b5ce3.js";const s={},o=t(`<p>一、查询SQL尽量不要使用select *，而是具体字段</p><p>1、反例</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT * FROM user
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、正例</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT id,username,tel FROM user
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3、理由</p><ol><li>节省资源、减少网络开销。</li><li>可能用到覆盖索引，减少回表，提高查询效率。</li></ol><p>注意：为节省时间，下面的样例字段都用*代替了。</p><h2 id="二、避免在where子句中使用-or-来连接条件" tabindex="-1"><a class="header-anchor" href="#二、避免在where子句中使用-or-来连接条件" aria-hidden="true">#</a> 二、避免在where子句中使用 or 来连接条件</h2><p>1、反例</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT * FROM user WHERE id=1 OR salary=5000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、正例</p><p>（1）使用union all</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT * FROM user WHERE id=1 
UNION ALL
SELECT * FROM user WHERE salary=5000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）分开两条sql写</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT * FROM user WHERE id=1

SELECT * FROM user WHERE salary=5000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、理由</p><ol><li>使用<code>or</code>可能会使索引失效，从而全表扫描；</li><li>对于<code>or</code>没有索引的<code>salary</code>这种情况，假设它走了<code>id</code>的索引，但是走到<code>salary</code>查询条件时，它还得全表扫描；</li><li>也就是说整个过程需要三步：全表扫描+索引扫描+合并。如果它一开始就走全表扫描，直接一遍扫描就搞定；</li><li>虽然<code>mysql</code>是有优化器的，出于效率与成本考虑，遇到<code>or</code>条件，索引还是可能失效的；</li></ol><h2 id="三、尽量使用数值替代字符串类型" tabindex="-1"><a class="header-anchor" href="#三、尽量使用数值替代字符串类型" aria-hidden="true">#</a> 三、尽量使用数值替代字符串类型</h2><p>1、正例</p><ol><li>主键（id）：<code>primary key</code>优先使用数值类型<code>int</code>，<code>tinyint</code></li><li>性别（sex）：0代表女，1代表男；数据库没有布尔类型，<code>mysql</code>推荐使用<code>tinyint</code></li></ol><p>2、理由</p><ol><li>因为引擎在处理查询和连接时会逐个比较字符串中每一个字符；</li><li>而对于数字型而言只需要比较一次就够了；</li><li>字符会降低查询和连接的性能，并会增加存储开销；</li></ol><h2 id="四、使用varchar代替char" tabindex="-1"><a class="header-anchor" href="#四、使用varchar代替char" aria-hidden="true">#</a> 四、使用varchar代替char</h2><p>1、反例</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>\`address\` char(100) DEFAULT NULL COMMENT &#39;地址&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、正例</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>\`address\` varchar(100) DEFAULT NULL COMMENT &#39;地址&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3、理由</p><ol><li><code>varchar</code>变长字段按数据内容实际长度存储，存储空间小，可以节省存储空间；</li><li><code>char</code>按声明大小存储，不足补空格；</li><li>其次对于查询来说，在一个相对较小的字段内搜索，效率更高；</li></ol><h2 id="五、技术延伸-char与varchar2的区别" tabindex="-1"><a class="header-anchor" href="#五、技术延伸-char与varchar2的区别" aria-hidden="true">#</a> 五、技术延伸，char与varchar2的区别？</h2><p>1、<code>char</code>的长度是固定的，而<code>varchar2</code>的长度是可以变化的。</p><p>比如，存储字符串<code>“101”</code>，对于<code>char(10)</code>，表示你存储的字符将占10个字节（包括7个空字符），在数据库中它是以空格占位的，而同样的<code>varchar2(10)</code>则只占用3个字节的长度，10只是最大值，当你存储的字符小于10时，按实际长度存储。</p><p>2、<code>char</code>的效率比<code>varchar2</code>的效率稍高。</p><p>3、何时用<code>char</code>，何时用<code>varchar2</code>?</p><p><code>char</code>和<code>varchar2</code>是一对矛盾的统一体，两者是互补的关系，<code>varchar2</code>比<code>char</code>节省空间，在效率上比<code>char</code>会稍微差一点，既想获取效率，就必须牺牲一点空间，这就是我们在数据库设计上常说的“以空间换效率”。</p><p><code>varchar2</code>虽然比<code>char</code>节省空间，但是假如一个<code>varchar2</code>列经常被修改，而且每次被修改的数据的长度不同，这会引起“行迁移”现象，而这造成多余的I/O，是数据库设计中要尽力避免的，这种情况下用<code>char</code>代替<code>varchar2</code>会更好一些。<code>char</code>中还会自动补齐空格，因为你<code>insert</code>到一个<code>char</code>字段自动补充了空格的,但是<code>select</code>后空格没有删除，因此<code>char</code>类型查询的时候一定要记得使用<code>trim</code>，这是写本文章的原因。</p><p>如果开发人员细化使用<code>rpad()</code>技巧将绑定变量转换为某种能与<code>char</code>字段相比较的类型（当然，与截断<code>trim</code>数据库列相比，填充绑定变量的做法更好一些，因为对列应用函数<code>trim</code>很容易导致无法使用该列上现有的索引），可能必须考虑到经过一段时间后列长度的变化。如果字段的大小有变化，应用就会受到影响，因为它必须修改字段宽度。</p><p>正是因为以上原因，定宽的存储空间可能导致表和相关索引比平常大出许多，还伴随着绑定变量问题，所以无论什么场合都要避免使用char类型。</p><h2 id="六、where中使用默认值代替null" tabindex="-1"><a class="header-anchor" href="#六、where中使用默认值代替null" aria-hidden="true">#</a> 六、where中使用默认值代替null</h2><p>1、反例</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT * FROM user WHERE age IS NOT NULL
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、正例</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT * FROM user WHERE age&gt;0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3、理由</p><ol><li>并不是说使用了<code>is null</code>或者 <code>is not null</code>就会不走索引了，这个跟<code>mysql</code>版本以及查询成本都有关；</li><li>如果<code>mysql</code>优化器发现，走索引比不走索引成本还要高，就会放弃索引，这些条件 <code>!=，&lt;&gt;，is null，is not null</code>经常被认为让索引失效；</li><li>其实是因为一般情况下，查询的成本高，优化器自动放弃索引的；</li><li>如果把<code>null</code>值，换成默认值，很多时候让走索引成为可能，同时，表达意思也相对清晰一点；</li></ol><h2 id="七、避免在where子句中使用-或-操作符" tabindex="-1"><a class="header-anchor" href="#七、避免在where子句中使用-或-操作符" aria-hidden="true">#</a> 七、避免在where子句中使用!=或&lt;&gt;操作符</h2><p>1、反例</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT * FROM user WHERE salary!=5000

SELECT * FROM user WHERE salary&lt;&gt;5000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、理由</p><ol><li>使用<code>!=</code>和<code>&lt;&gt;</code>很可能会让索引失效</li><li>应尽量避免在<code>where</code>子句中使用<code>!=</code>或<code>&lt;&gt;</code>操作符，否则引擎将放弃使用索引而进行全表扫描</li><li>实现业务优先，实在没办法，就只能使用，并不是不能使用</li></ol><h2 id="八、inner-join-、left-join、right-join-优先使用inner-join" tabindex="-1"><a class="header-anchor" href="#八、inner-join-、left-join、right-join-优先使用inner-join" aria-hidden="true">#</a> 八、inner join 、left join、right join，优先使用inner join</h2><p>三种连接如果结果相同，优先使用inner join，如果使用left join左边表尽量小。</p><ul><li>inner join 内连接，只保留两张表中完全匹配的结果集；</li><li>left join会返回左表所有的行，即使在右表中没有匹配的记录；</li><li>right join会返回右表所有的行，即使在左表中没有匹配的记录；</li></ul><p>为什么？</p><ul><li>如果inner join是等值连接，返回的行数比较少，所以性能相对会好一点；</li><li>使用了左连接，左边表数据结果尽量小，条件尽量放到左边处理，意味着返回的行数可能比较少；</li><li>这是mysql优化原则，就是小表驱动大表，小的数据集驱动大的数据集，从而让性能更优；</li></ul><h2 id="九、提高group-by语句的效率" tabindex="-1"><a class="header-anchor" href="#九、提高group-by语句的效率" aria-hidden="true">#</a> 九、提高group by语句的效率</h2><p>1、反例</p><p>先分组，再过滤</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select job, avg（salary） from employee 
group by job
having job =&#39;develop&#39; or job = &#39;test&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、正例</p><p>先过滤，后分组</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select job，avg（salary） from employee 
where job =&#39;develop&#39; or job = &#39;test&#39; 
group by job;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、理由</p><p>可以在执行到该语句前，把不需要的记录过滤掉</p><h2 id="十、清空表时优先使用truncate" tabindex="-1"><a class="header-anchor" href="#十、清空表时优先使用truncate" aria-hidden="true">#</a> 十、清空表时优先使用truncate</h2><p><code>truncate table</code>在功能上与不带 <code>where</code>子句的 <code>delete</code>语句相同：二者均删除表中的全部行。但 <code>truncate table</code>比 <code>delete</code>速度快，且使用的系统和事务日志资源少。</p><p><code>delete</code>语句每次删除一行，并在事务日志中为所删除的每行记录一项。<code>truncate table</code>通过释放存储表数据所用的数据页来删除数据，并且只在事务日志中记录页的释放。</p><p><code>truncate table</code>删除表中的所有行，但表结构及其列、约束、索引等保持不变。新行标识所用的计数值重置为该列的种子。如果想保留标识计数值，请改用 DELETE。如果要删除表定义及其数据，请使用 <code>drop table</code>语句。</p><p>对于由 <code>foreign key</code>约束引用的表，不能使用 <code>truncate table</code>，而应使用不带  <code>where</code>子句的 DELETE 语句。由于 <code>truncate table</code>不记录在日志中，所以它不能激活触发器。</p><p><code>truncate table</code>不能用于参与了索引视图的表。</p><h2 id="十一、操作delete或者update语句-加个limit或者循环分批次删除" tabindex="-1"><a class="header-anchor" href="#十一、操作delete或者update语句-加个limit或者循环分批次删除" aria-hidden="true">#</a> 十一、操作delete或者update语句，加个limit或者循环分批次删除</h2><p>1、降低写错SQL的代价</p><p>清空表数据可不是小事情，一个手抖全没了，删库跑路？如果加limit，删错也只是丢失部分数据，可以通过binlog日志快速恢复的。</p><p>2、SQL效率很可能更高</p><p>SQL中加了<code>limit 1</code>，如果第一条就命中目标<code>return</code>， 没有<code>limit</code>的话，还会继续执行扫描表。</p><p>3、避免长事务</p><p><code>delete</code>执行时,如果<code>age</code>加了索引，MySQL会将所有相关的行加写锁和间隙锁，所有执行相关行会被锁住，如果删除数量大，会直接影响相关业务无法使用。</p><p>4、数据量大的话，容易把CPU打满</p><p>如果你删除数据量很大时，不加 limit限制一下记录数，容易把<code>cpu</code>打满，导致越删越慢。</p><p>5、锁表</p><p>一次性删除太多数据，可能造成锁表，会有lock wait timeout exceed的错误，所以建议分批操作。</p><h2 id="十二、union操作符" tabindex="-1"><a class="header-anchor" href="#十二、union操作符" aria-hidden="true">#</a> 十二、UNION操作符</h2><p><code>UNION</code>在进行表链接后会筛选掉重复的记录，所以在表链接后会对所产生的结果集进行排序运算，删除重复的记录再返回结果。实际大部分应用中是不会产生重复的记录，最常见的是过程表与历史表<code>UNION</code>。如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select username,tel from user
union
select departmentname from department
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个SQL在运行时先取出两个表的结果，再用排序空间进行排序删除重复的记录，最后返回结果集，如果表数据量大的话可能会导致用磁盘进行排序。推荐方案：采用<code>UNION ALL</code>操作符替代<code>UNION</code>，因为<code>UNION ALL</code>操作只是简单的将两个结果合并后就返回。</p><h2 id="十三、批量插入性能提升" tabindex="-1"><a class="header-anchor" href="#十三、批量插入性能提升" aria-hidden="true">#</a> 十三、批量插入性能提升</h2><p>1、多条提交</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>INSERT INTO user (id,username) VALUES(1,&#39;哪吒编程&#39;);

INSERT INTO user (id,username) VALUES(2,&#39;妲己&#39;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、批量提交</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>INSERT INTO user (id,username) VALUES(1,&#39;哪吒编程&#39;),(2,&#39;妲己&#39;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3、理由</p><p>默认新增SQL有事务控制，导致每条都需要事务开启和事务提交，而批量处理是一次事务开启和提交，效率提升明显，达到一定量级，效果显著，平时看不出来。</p><h2 id="十四、表连接不宜太多-索引不宜太多-一般5个以内" tabindex="-1"><a class="header-anchor" href="#十四、表连接不宜太多-索引不宜太多-一般5个以内" aria-hidden="true">#</a> 十四、表连接不宜太多，索引不宜太多，一般5个以内</h2><p>1、表连接不宜太多，一般5个以内</p><ol><li>关联的表个数越多，编译的时间和开销也就越大</li><li>每次关联内存中都生成一个临时表</li><li>应该把连接表拆开成较小的几个执行，可读性更高</li><li>如果一定需要连接很多表才能得到数据，那么意味着这是个糟糕的设计了</li><li>阿里规范中，建议多表联查三张表以下</li></ol><p>2、索引不宜太多，一般5个以内</p><ol><li>索引并不是越多越好，虽其提高了查询的效率，但却会降低插入和更新的效率；</li><li>索引可以理解为一个就是一张表，其可以存储数据，其数据就要占空间；</li><li>索引表的数据是排序的，排序也是要花时间的；</li><li><code>insert</code>或<code>update</code>时有可能会重建索引，如果数据量巨大，重建将进行记录的重新排序，所以建索引需要慎重考虑，视具体情况来定；</li><li>一个表的索引数最好不要超过5个，若太多需要考虑一些索引是否有存在的必要；</li></ol><h2 id="十五、避免在索引列上使用内置函数" tabindex="-1"><a class="header-anchor" href="#十五、避免在索引列上使用内置函数" aria-hidden="true">#</a> 十五、避免在索引列上使用内置函数</h2><p>1、反例</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT * FROM user WHERE DATE_ADD(birthday,INTERVAL 7 DAY) &gt;=NOW();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、正例</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT * FROM user WHERE  birthday &gt;= DATE_ADD(NOW(),INTERVAL 7 DAY);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3、理由</p><p>使用索引列上内置函数，索引失效。</p><h2 id="十六、组合索引" tabindex="-1"><a class="header-anchor" href="#十六、组合索引" aria-hidden="true">#</a> 十六、组合索引</h2><p>排序时应按照组合索引中各列的顺序进行排序，即使索引中只有一个列是要排序的，否则排序性能会比较差。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>create index IDX_USERNAME_TEL on user(deptid,position,createtime);
select username,tel from user where deptid= 1 and position = &#39;java开发&#39; order by deptid,position,createtime desc; 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上只是查询出符合 <code>deptid= 1 and position = &#39;java开发&#39;</code>条件的记录并按createtime降序排序，但写成order by createtime desc性能较差。</p><h2 id="十七、复合索引最左特性" tabindex="-1"><a class="header-anchor" href="#十七、复合索引最左特性" aria-hidden="true">#</a> 十七、复合索引最左特性</h2><p>1、创建复合索引</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ALTER TABLE employee ADD INDEX idx_name_salary (name,salary)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、满足复合索引的最左特性，哪怕只是部分，复合索引生效</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT * FROM employee WHERE NAME=&#39;哪吒编程&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3、没有出现左边的字段，则不满足最左特性，索引失效</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT * FROM employee WHERE salary=5000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>4、复合索引全使用，按左侧顺序出现 name,salary，索引生效</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT * FROM employee WHERE NAME=&#39;哪吒编程&#39; AND salary=5000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>5、虽然违背了最左特性，但MySQL执行SQL时会进行优化，底层进行颠倒优化</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT * FROM employee WHERE salary=5000 AND NAME=&#39;哪吒编程&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>6、理由</p><p>复合索引也称为联合索引，当我们创建一个联合索引的时候，如(k1,k2,k3)，相当于创建了（k1）、(k1,k2)和(k1,k2,k3)三个索引，这就是最左匹配原则。</p><p>联合索引不满足最左原则，索引一般会失效。</p><h2 id="十八、优化like语句" tabindex="-1"><a class="header-anchor" href="#十八、优化like语句" aria-hidden="true">#</a> 十八、优化like语句</h2><p>模糊查询，程序员最喜欢的就是使用<code>like</code>，但是<code>like</code>很可能让你的索引失效。</p><p>1、反例</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select * from citys where name like &#39;%大连&#39; (不使用索引)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select * from citys where name like &#39;%大连%&#39; (不使用索引)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、正例</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select * from citys where name like &#39;大连%&#39; (使用索引) 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3、理由</p><ul><li>首先尽量避免模糊查询，如果必须使用，不采用全模糊查询，也应尽量采用右模糊查询， 即<code>like ‘…%’</code>，是会使用索引的；</li><li>左模糊<code>like ‘%...’</code>无法直接使用索引，但可以利用<code>reverse + function index</code>的形式，变化成 <code>like ‘…%’</code>；</li><li>全模糊查询是无法优化的，一定要使用的话建议使用搜索引擎。</li></ul><h2 id="十九、使用explain分析你sql执行计划" tabindex="-1"><a class="header-anchor" href="#十九、使用explain分析你sql执行计划" aria-hidden="true">#</a> 十九、使用explain分析你SQL执行计划</h2><p>1、type</p><ol><li>system：表仅有一行，基本用不到；</li><li>const：表最多一行数据配合，主键查询时触发较多；</li><li>eq_ref：对于每个来自于前面的表的行组合，从该表中读取一行。这可能是最好的联接类型，除了const类型；</li><li>ref：对于每个来自于前面的表的行组合，所有有匹配索引值的行将从这张表中读取；</li><li>range：只检索给定范围的行，使用一个索引来选择行。当使用=、&lt;&gt;、&gt;、&gt;=、&lt;、&lt;=、IS NULL、&lt;=&gt;、BETWEEN或者IN操作符，用常量比较关键字列时，可以使用range；</li><li>index：该联接类型与ALL相同，除了只有索引树被扫描。这通常比ALL快，因为索引文件通常比数据文件小；</li><li>all：全表扫描；</li><li>性能排名：system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; all。</li><li>实际sql优化中，最后达到ref或range级别。</li></ol><p>2、Extra常用关键字</p><ul><li>Using index：只从索引树中获取信息，而不需要回表查询；</li><li>Using where：WHERE子句用于限制哪一个行匹配下一个表或发送到客户。除非你专门从表中索取或检查所有行，如果Extra值不为Using where并且表联接类型为ALL或index，查询可能会有一些错误。需要回表查询。</li><li>Using temporary：mysql常建一个临时表来容纳结果，典型情况如查询包含可以按不同情况列出列的<code>GROUP BY</code>和<code>ORDER BY</code>子句时；</li></ul><h2 id="二十、一些其它优化方式" tabindex="-1"><a class="header-anchor" href="#二十、一些其它优化方式" aria-hidden="true">#</a> 二十、一些其它优化方式</h2><p>1、设计表的时候，所有表和字段都添加相应的注释。</p><p>2、SQL书写格式，关键字大小保持一致，使用缩进。</p><p>3、修改或删除重要数据前，要先备份。</p><p>4、很多时候用 exists 代替 in 是一个好的选择</p><p>5、where后面的字段，留意其数据类型的隐式转换。</p><p>未使用索引</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT * FROM user WHERE NAME=110
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（1） 因为不加单引号时，是字符串跟数字的比较，它们类型不匹配；</p><p>（2）MySQL会做隐式的类型转换，把它们转换为数值类型再做比较；</p><p>6、尽量把所有列定义为<code>NOT NULL</code></p><p><code>NOT NULL</code>列更节省空间，<code>NULL</code>列需要一个额外字节作为判断是否为 <code>NULL</code>的标志位。<code>NULL</code>列需要注意空指针问题，<code>NULL</code>列在计算和比较的时候，需要注意空指针问题。</p><p>7、伪删除设计</p><p>8、数据库和表的字符集尽量统一使用UTF8</p><p>（1）可以避免乱码问题；</p><p>（2）可以避免，不同字符集比较转换，导致的索引失效问题；</p><p>9、select count(*) from table；</p><p>这样不带任何条件的count会引起全表扫描，并且没有任何业务意义，是一定要杜绝的。</p><p>10、避免在where中对字段进行表达式操作</p><p>（1）SQL解析时，如果字段相关的是表达式就进行全表扫描 ；</p><p>（2）字段干净无表达式，索引生效；</p><p>11、关于临时表</p><p>（1）避免频繁创建和删除临时表，以减少系统表资源的消耗；</p><p>（2）在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log；</p><p>（3）如果数据量不大，为了缓和系统表的资源，应先create table，然后insert；</p><p>（4）如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除。先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定；</p><p>12、索引不适合建在有大量重复数据的字段上，比如性别，排序字段应创建索引</p><p>13、去重distinct过滤字段要少</p><ol><li>带distinct的语句占用<code>cpu</code>时间高于不带<code>distinct</code>的语句</li><li>当查询很多字段时，如果使用<code>distinct</code>，数据库引擎就会对数据进行比较，过滤掉重复数据</li><li>然而这个比较、过滤的过程会占用系统资源，如<code>cpu</code>时间</li></ol><p>14、尽量避免大事务操作，提高系统并发能力</p><p>15、所有表必须使用<code>Innodb</code>存储引擎</p><p><code>Innodb</code>「支持事务，支持行级锁，更好的恢复性」，高并发下性能更好，所以呢，没有特殊要求（即<code>Innodb</code>无法满足的功能如：列存储，存储空间数据等）的情况下，所有表必须使用<code>Innodb</code>存储引擎。</p><p>16、尽量避免使用游标</p><p>因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</p><p>来源：网络</p>`,172),p={href:"https://mp.weixin.qq.com/s?__biz=MzkwNjMwMTgzMQ==&mid=2247498038&idx=1&sn=2748ba3d13fbb854125f334b7723e905&chksm=c0e821def79fa8c85c63ca70fb6e4e5fbe991770133bd8e670c11fa45bfce044f9e2d6fd6206&scene=27#wechat_redirect",target:"_blank",rel:"noopener noreferrer"};function u(h,v){const a=l("ExternalLinkIcon");return c(),n("div",null,[o,e("blockquote",null,[e("p",null,[d("参考链接："),e("a",p,[d("https://mp.weixin.qq.com/s?__biz=MzkwNjMwMTgzMQ==&mid=2247498038&idx=1&sn=2748ba3d13fbb854125f334b7723e905&chksm=c0e821def79fa8c85c63ca70fb6e4e5fbe991770133bd8e670c11fa45bfce044f9e2d6fd6206&scene=27#wechat_redirect"),r(a)]),d("，出处：苏三说技术，整理：沉默王二")])])])}const g=i(s,[["render",u],["__file","sqlyhz.html.vue"]]);export{g as default};
