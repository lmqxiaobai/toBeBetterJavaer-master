const n=JSON.parse('{"key":"v-adf4a16e","path":"/thread/map.html","title":"简单聊聊Java的并发集合容器","lang":"zh-CN","frontmatter":{"title":"简单聊聊Java的并发集合容器","shortTitle":"简单聊聊Java的并发集合容器","description":"简单聊聊Java的并发集合容器","category":["Java核心"],"tag":["Java并发编程"],"head":[["meta",{"name":"keywords","content":"Java,并发编程,多线程,Thread,并发集合容器"}],["meta",{"property":"og:url","content":"https://javabetter.cn/thread/map.html"}],["meta",{"property":"og:site_name","content":"二哥的Java进阶之路"}],["meta",{"property":"og:title","content":"简单聊聊Java的并发集合容器"}],["meta",{"property":"og:description","content":"简单聊聊Java的并发集合容器"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-24T02:39:04.000Z"}],["meta",{"property":"article:author","content":"沉默王二"}],["meta",{"property":"article:tag","content":"Java并发编程"}],["meta",{"property":"article:modified_time","content":"2023-04-24T02:39:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"简单聊聊Java的并发集合容器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-24T02:39:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"沉默王二\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"同步容器与并发容器","slug":"同步容器与并发容器","link":"#同步容器与并发容器","children":[]},{"level":2,"title":"并发容器类介绍","slug":"并发容器类介绍","link":"#并发容器类介绍","children":[]},{"level":2,"title":"并发Map","slug":"并发map","link":"#并发map","children":[{"level":3,"title":"ConcurrentMap接口","slug":"concurrentmap接口","link":"#concurrentmap接口","children":[]},{"level":3,"title":"ConcurrentNavigableMap接口与ConcurrentSkipListMap类","slug":"concurrentnavigablemap接口与concurrentskiplistmap类","link":"#concurrentnavigablemap接口与concurrentskiplistmap类","children":[]}]},{"level":2,"title":"并发Queue","slug":"并发queue","link":"#并发queue","children":[]},{"level":2,"title":"并发Set","slug":"并发set","link":"#并发set","children":[]},{"level":2,"title":"阻塞队列","slug":"阻塞队列","link":"#阻塞队列","children":[{"level":3,"title":"阻塞队列的由来","slug":"阻塞队列的由来","link":"#阻塞队列的由来","children":[]},{"level":3,"title":"BlockingQueue的操作方法","slug":"blockingqueue的操作方法","link":"#blockingqueue的操作方法","children":[]},{"level":3,"title":"BlockingQueue的实现类","slug":"blockingqueue的实现类","link":"#blockingqueue的实现类","children":[]},{"level":3,"title":"阻塞队列的原理","slug":"阻塞队列的原理","link":"#阻塞队列的原理","children":[]},{"level":3,"title":"示例和使用场景","slug":"示例和使用场景","link":"#示例和使用场景","children":[]}]},{"level":2,"title":"CopyOnWrite容器","slug":"copyonwrite容器","link":"#copyonwrite容器","children":[{"level":3,"title":"什么是CopyOnWrite容器","slug":"什么是copyonwrite容器","link":"#什么是copyonwrite容器","children":[]},{"level":3,"title":"CopyOnWriteArrayList","slug":"copyonwritearraylist","link":"#copyonwritearraylist","children":[]},{"level":3,"title":"CopyOnWrite的业务中实现","slug":"copyonwrite的业务中实现","link":"#copyonwrite的业务中实现","children":[]}]}],"git":{"createdTime":1648037338000,"updatedTime":1682303944000,"contributors":[{"name":"itwanger","email":"www.qing_gee@163.com","commits":10},{"name":"沉默王二","email":"www.qing_gee@163.com","commits":2}]},"readingTime":{"minutes":21.98,"words":6593},"filePathRelative":"thread/map.md","localizedDate":"2022年3月23日","excerpt":"<h1> 简单聊聊Java的并发集合容器</h1>\\n<h2> 同步容器与并发容器</h2>\\n<p>我们知道在java.util包下提供了一些容器类，而Vector和Hashtable是线程安全的容器类，但是这些容器实现同步的方式是通过对方法加锁(sychronized)方式实现的，这样读写均需要锁操作，导致性能低下。</p>\\n<p>而即使是Vector这样线程安全的类，在面对多线程下的复合操作的时候也是需要通过客户端加锁的方式保证原子性。如下面例子说明:</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">TestVector</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">Vector</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">&gt;</span></span> vector<span class=\\"token punctuation\\">;</span>\\n\\n\\t<span class=\\"token comment\\">//方法一</span>\\n\\t<span class=\\"token keyword\\">public</span>  <span class=\\"token class-name\\">Object</span> <span class=\\"token function\\">getLast</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Vector</span> vector<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t    <span class=\\"token keyword\\">int</span> lastIndex <span class=\\"token operator\\">=</span> vector<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n\\t    <span class=\\"token keyword\\">return</span> vector<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>lastIndex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\n\\t<span class=\\"token comment\\">//方法二</span>\\n\\t<span class=\\"token keyword\\">public</span>  <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">deleteLast</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Vector</span> vector<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t    <span class=\\"token keyword\\">int</span> lastIndex <span class=\\"token operator\\">=</span> vector<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n\\t    vector<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">remove</span><span class=\\"token punctuation\\">(</span>lastIndex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\n\\t<span class=\\"token comment\\">//方法三</span>\\n\\t<span class=\\"token keyword\\">public</span>  <span class=\\"token class-name\\">Object</span> <span class=\\"token function\\">getLastSysnchronized</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Vector</span> vector<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">synchronized</span><span class=\\"token punctuation\\">(</span>vector<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token keyword\\">int</span> lastIndex <span class=\\"token operator\\">=</span> vector<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token keyword\\">return</span> vector<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>lastIndex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token comment\\">//方法四</span>\\n\\t<span class=\\"token keyword\\">public</span>  <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">deleteLastSysnchronized</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Vector</span> vector<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">synchronized</span> <span class=\\"token punctuation\\">(</span>vector<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token keyword\\">int</span> lastIndex <span class=\\"token operator\\">=</span> vector<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\tvector<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">remove</span><span class=\\"token punctuation\\">(</span>lastIndex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{n as data};
