import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as a,c as r,a as p,d as e,b as s,e as c}from"./app-1c5b5ce3.js";const i={},l=c('<p>老实说，在我一开始学编程的时候，根本没有去关注进制之间的转换问题，直到后来阅读了一本《程序是怎样跑起来的》，里面对进制转换，尤其是十进制和二进制之间的转换，感觉十分有趣。</p><p>比如说二进制左移一位，会发生什么？</p><p>右移一位，又会发生什么？</p><p>明白了之后，当我再去阅读 JDK 的一些涉及到位移/取余的代码的时候，就会恍然大悟，哦，原来如此啊。那今天这篇内容也希望给球友们一些帮助和参考。</p><p>二进制换十进制 是比 十进制换二进制更基础的，我们从这里讲起。</p><p>进制这事儿，说到底就是位值原理，即：</p><p><strong>同一个数字，放在不同的数位上，代表不同大小的数</strong>。</p><p>例如：十进制中，百位上的1表示100，十位上的1表示10.</p><p>十进制之中，每个数都可以被拆开：</p><p>123=1×100+2×10+3×1</p><p>9876=9×1000+8×100+7×10+6×1</p><p>这个事情先搞清爽，然后我们就可以为拓展进制做准备了：</p><p>试回答这个问题：为啥相应的数位是1000、100、10、1？为啥不是4、3、2、1？</p><p>答：满十进一，再满十再进一，因此要想进到第三位，得有10×10；第4位得有10×10×10</p><p>这样我们就知道了，对10进制，从低位到高位，依次要乘上：</p><p>10^0(10的0次方，后同)，10^1,10^2,10^3……</p><p>下面我们开始换进制玩儿：</p><p>把<em><strong>十</strong></em> 进制换成 <em><strong>二</strong></em> 进制</p><p>也就是把<strong>10</strong>换成<strong>2</strong></p><p>那么我们得到：</p><p>对2进制，从低位到高位，依次要乘以2^0，2^1,2^2,2^3……</p><p>也就是1、2、4、8、……</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/zhihu-jinzzhdylssm-a7357f84-ac6f-46dd-a2da-d37df75679b3.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>因此原来十进制咱们叫 十位、百位、千位……</p><p>现在二进制其实是 二位、四位、八位……</p><p>这样我们就能做十进制换二进制了：</p><p>比如：二进制数1011=1×2^3+0×2^2+1×2^1+1×2^0=1×8+0×4+1×2+1×1=8+2+1=11</p><p>（由于二进制中非零的数只有1，所以其实等同于：</p><p>个位有数就加1，二位有数就加2，四位有数就加4……）</p><p>接下来我们进行十进制往二进制的转换：</p><p>比较小的数，直接通过拆分就可以转换回去</p><p>比如13，我们数一数，1、2、4、8、16……，唔，不能包含16了，那就只能包含8。 13-8=5，5当中有4,5-4=1</p><p>好啦，我们知道13=8+4+1</p><p>接着把她对应回相应位置去，8是从低往高数的第4位，4是从低往高数的第3位，1是从低往高数的第1位</p><p>于是13=二进制数1101</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/zhihu-jinzzhdylssm-92ccc114-aba8-4817-bb54-825b444ed6cf.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后就多练习这个，反复练，让自己熟悉这个感觉：</p><p>17=16+1=二进制10001</p><p>19=16+2+1=二进制10011</p><p>30=16+8+4+2=二进制11110</p><p>……</p><p>比较熟悉之后就可以看看高级的短除法化二进制了（不要偷懒哦！先去把前面的练熟！）：</p><p>粗鄙地来做的话，现在你按照书上说的短除法来试试，会发现它和你凑数得到的结果刚好是一样的，好神奇~</p><p>以后就按这个做吧！</p><p>想要知道其中的道理的话：</p><p>（1）一个二进制数末尾是1，意味着一定是……+1，前面的每个数都是2的倍数，只有最后的+1不是</p><p>所以一个二进制数末尾是1，意味着它对应的十进制数除以2一定是余1的。</p><p>所以第一次除以2之后的余数，就是转换结果中的最后一位。</p><p>（2）如果一个二进制数从低往高第2位是1，我们希望把它转换为（1）的情况，那么我们把这个二进制数的末尾抹掉。</p><p>抹掉尾巴的二进制数，和原来的二进制数相比，每个数都往低位错了1位，相当于除以2.</p><p>末尾的尾巴丢掉了，相当于我们把余数丢掉了。</p><p>而这个除以2的步骤，刚好是（1）当中判断末尾是不是1的步骤，所以我们刚好可以继续做下去。</p><p>对这个抹掉了尾巴的二进制数（十进制来说就是原数除以二之后的商），我们继续（1）的做法，把它除以2，看余数。</p><p>……</p><p>如此继续下去，就可以得到短除法的结论了。</p><p>比如说十进制整体右移一位（相当于小数点左移一位），是除以十。十进制除以十，类比过来，二进制除以二</p>',56),d={href:"https://www.zhihu.com/question/20993504/answer/16946150",target:"_blank",rel:"noopener noreferrer"};function g(m,f){const t=o("ExternalLinkIcon");return a(),r("div",null,[l,p("blockquote",null,[p("p",null,[e("参考链接："),p("a",d,[e("https://www.zhihu.com/question/20993504/answer/16946150"),s(t)])])])])}const b=n(i,[["render",g],["__file","jinzzhdylssm.html.vue"]]);export{b as default};
