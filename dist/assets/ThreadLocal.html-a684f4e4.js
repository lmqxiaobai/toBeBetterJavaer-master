const e=JSON.parse('{"key":"v-00920464","path":"/thread/ThreadLocal.html","title":"吊打Java并发面试官之ThreadLocal","lang":"zh-CN","frontmatter":{"title":"吊打Java并发面试官之ThreadLocal","shortTitle":"ThreadLocal","description":"吊打Java并发面试官之ThreadLocal","category":["Java核心"],"tag":["Java并发编程"],"head":[["meta",{"name":"keywords","content":"Java,并发编程,多线程,Thread,ThreadLocal"}],["meta",{"property":"og:url","content":"https://javabetter.cn/thread/ThreadLocal.html"}],["meta",{"property":"og:site_name","content":"二哥的Java进阶之路"}],["meta",{"property":"og:title","content":"吊打Java并发面试官之ThreadLocal"}],["meta",{"property":"og:description","content":"吊打Java并发面试官之ThreadLocal"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-10T14:14:27.000Z"}],["meta",{"property":"article:author","content":"沉默王二"}],["meta",{"property":"article:tag","content":"Java并发编程"}],["meta",{"property":"article:modified_time","content":"2023-04-10T14:14:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"吊打Java并发面试官之ThreadLocal\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-10T14:14:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"沉默王二\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"ThreadLocal 的简介","slug":"threadlocal-的简介","link":"#threadlocal-的简介","children":[]},{"level":2,"title":"ThreadLocal 的实现原理","slug":"threadlocal-的实现原理","link":"#threadlocal-的实现原理","children":[{"level":3,"title":"set() 方法","slug":"set-方法","link":"#set-方法","children":[]},{"level":3,"title":"get() 方法","slug":"get-方法","link":"#get-方法","children":[]},{"level":3,"title":"remove() 方法","slug":"remove-方法","link":"#remove-方法","children":[]}]},{"level":2,"title":"ThreadLocalMap 详解","slug":"threadlocalmap-详解","link":"#threadlocalmap-详解","children":[{"level":3,"title":"Entry 数据结构","slug":"entry-数据结构","link":"#entry-数据结构","children":[]},{"level":3,"title":"set 方法","slug":"set-方法-1","link":"#set-方法-1","children":[]},{"level":3,"title":"getEntry 方法","slug":"getentry-方法","link":"#getentry-方法","children":[]},{"level":3,"title":"remove 方法","slug":"remove-方法-1","link":"#remove-方法-1","children":[]}]},{"level":2,"title":"ThreadLocal 的使用场景","slug":"threadlocal-的使用场景","link":"#threadlocal-的使用场景","children":[]}],"git":{"createdTime":1648037338000,"updatedTime":1681136067000,"contributors":[{"name":"itwanger","email":"www.qing_gee@163.com","commits":10},{"name":"沉默王二","email":"www.qing_gee@163.com","commits":1}]},"readingTime":{"minutes":17.95,"words":5384},"filePathRelative":"thread/ThreadLocal.md","localizedDate":"2022年3月23日","excerpt":"<h2> ThreadLocal 的简介</h2>\\n<p>在多线程编程中通常解决线程安全的问题时，我们会利用 synchronzed 或者 lock 控制线程对临界区资源的同步顺序，但是这种加锁的方式会让未获取到锁的线程进行阻塞等待，很显然这种方式的时间效率并不是特别好。</p>\\n<p><strong>线程安全问题的核心在于多个线程会对同一个临界区共享资源进行操作</strong>，那么，如果每个线程都使用自己的“共享资源”，各自使用各自的，互相不影响到彼此，即多个线程间达到隔离的状态，这样就不会出现线程安全的问题。</p>\\n<p>事实上，这就是一种“<strong>空间换时间</strong>”的方案，每个线程都拥有自己的“共享资源”无疑会让内存占用大很多，但是由于不需要同步也就减少了线程可能存在的阻塞等待，从而提高时间效率。</p>"}');export{e as data};
