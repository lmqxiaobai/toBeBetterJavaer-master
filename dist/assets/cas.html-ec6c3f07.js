const e=JSON.parse('{"key":"v-c14f0f20","path":"/thread/cas.html","title":"Java实现CAS的原理","lang":"zh-CN","frontmatter":{"title":"Java实现CAS的原理","shortTitle":"Java实现CAS的原理","description":"Java实现CAS的原理","category":["Java核心"],"tag":["Java并发编程"],"head":[["meta",{"name":"keywords","content":"Java,并发编程,多线程,Thread,cas"}],["meta",{"property":"og:url","content":"https://javabetter.cn/thread/cas.html"}],["meta",{"property":"og:site_name","content":"二哥的Java进阶之路"}],["meta",{"property":"og:title","content":"Java实现CAS的原理"}],["meta",{"property":"og:description","content":"Java实现CAS的原理"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-24T02:39:04.000Z"}],["meta",{"property":"article:author","content":"沉默王二"}],["meta",{"property":"article:tag","content":"Java并发编程"}],["meta",{"property":"article:modified_time","content":"2023-04-24T02:39:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java实现CAS的原理\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-24T02:39:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"沉默王二\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"乐观锁与悲观锁的概念","slug":"乐观锁与悲观锁的概念","link":"#乐观锁与悲观锁的概念","children":[]},{"level":2,"title":"CAS的概念","slug":"cas的概念","link":"#cas的概念","children":[]},{"level":2,"title":"Java实现CAS的原理 - Unsafe类","slug":"java实现cas的原理-unsafe类","link":"#java实现cas的原理-unsafe类","children":[]},{"level":2,"title":"原子操作-AtomicInteger类源码简析","slug":"原子操作-atomicinteger类源码简析","link":"#原子操作-atomicinteger类源码简析","children":[]},{"level":2,"title":"CAS实现原子操作的三大问题","slug":"cas实现原子操作的三大问题","link":"#cas实现原子操作的三大问题","children":[{"level":3,"title":"ABA问题","slug":"aba问题","link":"#aba问题","children":[]},{"level":3,"title":"循环时间长开销大","slug":"循环时间长开销大","link":"#循环时间长开销大","children":[]},{"level":3,"title":"只能保证一个共享变量的原子操作","slug":"只能保证一个共享变量的原子操作","link":"#只能保证一个共享变量的原子操作","children":[]}]}],"git":{"createdTime":1648037338000,"updatedTime":1682303944000,"contributors":[{"name":"itwanger","email":"www.qing_gee@163.com","commits":9},{"name":"沉默王二","email":"www.qing_gee@163.com","commits":2}]},"readingTime":{"minutes":10.67,"words":3200},"filePathRelative":"thread/cas.md","localizedDate":"2022年3月23日","excerpt":"<h1> Java实现CAS的原理</h1>\\n<p>在并发编程中我们都知道<code>i++</code>操作是非线程安全的，这是因为 <code>i++</code>操作不是原子操作。</p>\\n<p>如何保证原子性呢？常用的方法就是<code>加锁</code>。在Java语言中可以使用 <code>synchronized</code>和<code>CAS</code>实现加锁效果。</p>\\n<p><code>synchronized</code>是悲观锁，线程开始执行第一步就是获取锁，一旦获得锁，其他的线程进入后就会阻塞等待锁。如果不好理解，举个生活中的例子：一个人进入厕所后首先把门锁上（获取锁），然后开始上厕所，这个时候有其他人来了只能在外面等（阻塞），就算再急也没用。上完厕所完事后把门打开（解锁），其他人就可以进入了。</p>"}');export{e as data};
